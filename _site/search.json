[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "werk.statt.codes",
    "section": "",
    "text": "Calls to Order in Austria’s Parliament\n\n\n\nAustria\n\n\nParliament\n\n\n\nWhenever a speaker in the National Council uses e.g. foul language and violates the ‘dignity of the house’, the president of the National Council is tasked with issuing a…\n\n\n\n25 Sep 2024\n\n\n\n\n\n\n\n\n\n\n\nProfessional politicians and their position on electoral lists\n\n\n\nAustria\n\n\nelections\n\n\n\nElectoral lists in Austria include next to the name of each candidate also their profession. How prevalent are candidates who are politicians by profession and where are…\n\n\n\n9 Jul 2024\n\n\n\n\n\n\n\n\n\n\n\nAustrian National Council: Time limits of speeches, and other ramblings…\n\n\n\nAustria\n\n\nparliament\n\n\nr-bloggers\n\n\n\nWho speaks for how long in the National Council of Austria’s Parliament? And who respects the relevant time limits?\n\n\n\n19 Jun 2024\n\n\n\n\n\n\n\n\n\n\n\nState Elections 2023: Municipal electoral performance and COVID vaccination rates\n\n\n\nAustria\n\n\nCOVID\n\n\nelections\n\n\nR\n\n\n\nHow does the electoral performance of parties and the COVID vaccination status on the municipal level correlate? A look at the three most recent state elections in Austria.\n\n\n\n24 Apr 2023\n\n\n\n\n\n\n\n\n\n\n\n2023 State Elections in Salzburg - A look at data extracted from the electoral lists\n\n\n\nAustria\n\n\nelections\n\n\nR\n\n\n\nHow to to scrape content from the electoral lists, and analyze data pertaining to age, regional and gender composition.\n\n\n\n21 Apr 2023\n\n\n\n\n\n\n\n\n\n\n\nParliament’s new API - How to access data on MPs\n\n\n\nAustria\n\n\nAPI\n\n\n\nWhat is the gender composition of Austria’s Nationalrat? How did it evolve over time? Who are the longest serving MPs? This post details how to answer these and similar…\n\n\n\n10 Feb 2023\n\n\n\n\n\n\n\n\n\n\n\n‘The Professor and the Wolf’ - Number of parties in Austria\n\n\n\nAustria\n\n\nparties\n\n\n\nA quick look at the number of registered political parties in Austria, prompted by the podcast “The Professor and the Wolf”.\n\n\n\n10 Jan 2023\n\n\n\n\n\n\n\n\n\n\n\nHow to extract speeches held at Austria’s parliament\n\n\n\nAustria\n\n\ntext analysis\n\n\nweb scraping\n\n\nregex\n\n\n\nThe website of the Austrian parliament provides transcripts of its sessions. This post details how to extract the statements given by MPs, members of government and other…\n\n\n\n22 Nov 2021\n\n\n\n\n\n\n\n\n\n\n\nHow often do Austria’s Chancellors use the word ‘I’\n\n\n\nAustria\n\n\nregex\n\n\n\nIn a previous post, I detailed how to extract statements given in Austria’s parliament from the sessions’ transcripts. In this post, I use the extracted text - in…\n\n\n\n21 Nov 2021\n\n\n\n\n\n\n\n\n\n\n\nA look at the transcripts of the ‘Ibizia Inquiry’\n\n\n\nAustria\n\n\nParliament\n\n\nweb scraping\n\n\n\nIn mid-June, the so-called ‘Ibiza Commission of Inquiry’ heard its last witness after almost one year at work. The commission had been established by the Austrian Parliament…\n\n\n\n7 Oct 2021\n\n\n\n\n\n\n\n\n\n\n\nAustria’s Covid legislation: The remarkable absence of authorship in public submissions to the consultative process\n\n\n\nAustria\n\n\nCOVID\n\n\n\nAustria’s legislative procedure provides for a consultative process which allows all citizens to make submissions in which they can raise their concerns as to a proposed…\n\n\n\n16 Mar 2021\n\n\n\n\n\n\n\n\n\n\n\nAustria’s Covid legislation: Duration of parliamentarian consultation period in comparison.\n\n\n\nAustria\n\n\nCorona\n\n\npdftools\n\n\n\nA (relative) deep dive into the length of the public consultation period for draft bills in Austria, and whether three days for three pages are actually ‘normal’.\n\n\n\n20 Feb 2021\n\n\n\n\n\n\n\n\n\n\n\nSimilarity of public submissions to Austria’s amendment of the epidemic law\n\n\n\nAustria\n\n\nCOVID\n\n\nOCR\n\n\nstringr\n\n\nweb scraping\n\n\n\nAn analysis of public submissions to bill seeking to amend Austria’s epidemic law.\n\n\n\n22 Dec 2020\n\n\n\n\n\n\n\n\n\n\n\nVienna Elections 2020: Parties’ ads on facebook\n\n\n\nAustria\n\n\nsocial media\n\n\nelections\n\n\n\nAnalysis of the facebook ads placed in the run-up to the 2020 Vienna city elections.\n\n\n\n19 Dec 2020\n\n\n\n\n\n\n\n\n\n\n\nAdding background images to maps.\n\n\n\nmaps\n\n\nAustria\n\n\nsf\n\n\nsnapbox\n\n\nmapbox\n\n\n\nHow to create ggplot maps with mapbox images as background.\n\n\n\n25 Nov 2020\n\n\n\n\n\n\n\n\n\n\n\nRecreating NYT election map\n\n\n\nAustria\n\n\nCOVID\n\n\nOCRh\n\n\nstringr\n\n\nweb scraping\n\n\n\nHow to re-create election maps by the NYT with ggplot.\n\n\n\n18 Nov 2020\n\n\n\n\n\n\n\n\n\n\n\nVienna Elections 2020: Age profile of electoral candidates\n\n\n\nAustria\n\n\nelections\n\n\nOCR\n\n\nregex\n\n\nreactable\n\n\ngt\n\n\n\nAn empirical look at candidates’ age.\n\n\n\n10 Oct 2020\n\n\n\n\n\n\n\n\n\n\n\nAustrian Parliament: MPs transparency and conflict of interest report\n\n\n\nAustria\n\n\nOCR\n\n\nweb scraping\n\n\n\nAnalysis of Austria MP’s transparency reports.\n\n\n\n21 Jul 2020\n\n\n\n\n\n\n\n\n\n\n\nUpdate on Google mobility reports on Austria\n\n\n\nAustria\n\n\nclimate\n\n\nCOVID\n\n\nshiny\n\n\n\nThis is a short update on my previous post dealing with Google’s mobility reports on Austria during the Covid-19 crisis.\n\n\n\n8 Jun 2020\n\n\n\n\n\n\n\n\n\n\n\nGoogle’s Mobility reports: changes to mobility patterns during Covid-19 lock-down in Austria\n\n\n\nCOVID\n\n\nAustria\n\n\n\nAnalysis of Google’s mobility reports following introduction of Covid lockdown in March 2020.\n\n\n\n28 Apr 2020\n\n\n\n\n\n\n\n\n\n\n\nCorona Virus in Austria: Updates on data\n\n\n\nAustria\n\n\nCOVID\n\n\n\nPreliminary look at the COVID data on Austria.\n\n\n\n23 Apr 2020\n\n\n\n\n\n\n\n\n\n\n\nSegregation in Vienna’s primary schools?\n\n\n\nAustria\n\n\nplotly\n\n\ncrosstalk\n\n\n\nDrawing on public data from Vienna’s school administration I look at how many percentages of pupils in each primary school subsequently leave for schools offering eventually…\n\n\n\n2 Mar 2020\n\n\n\n\n\n\n\n\n\n\n\nBosnia: Voting behavior of MPs in the House of Representatives\n\n\n\nBosnia\n\n\nOCR\n\n\nweb scraping\n\n\n\nCreating and analyzing a new dataset on the voting behavior of BiH’s members of the House of Representatives.\n\n\n\n7 Feb 2020\n\n\n\n\n\n\n\n\n\n\n\nAustrian General Elections 2019: Preference votes\n\n\n\nelections\n\n\nstringr\n\n\ntidyr::pivot\n\n\nAustria\n\n\n\nA look at the distribution of preference votes casted in the 2019 general elections.\n\n\n\n20 Nov 2019\n\n\n\n\n\n\n\n\n\n\n\nWomen in Parliament\n\n\n\nwomen\n\n\n\nHow well are women represented in Austria’s new parliament. A comparative look at the female share of MPs.\n\n\n\n24 Oct 2019\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-09-09-call-for-order/index.html#load-packages",
    "href": "posts/2024-09-09-call-for-order/index.html#load-packages",
    "title": "Calls to Order in Austria’s Parliament",
    "section": "2.1 Load packages",
    "text": "2.1 Load packages\n\n\nLoad packages\nlibrary(tidyverse)\nlibrary(reactable)\nlibrary(reactablefmtr)\nlibrary(htmltools)\nlibrary(ggtext)\nlibrary(httr2)\nlibrary(ParlAT)\nlibrary(furrr)\nplan(multisession, workers = 3)\n\n#needed to display custom fonts in quarto\nknitr::opts_chunk$set(dev = \"ragg_png\")\n\n#define theme\ntheme_post &lt;- function() {\n  hrbrthemes::theme_ipsum_rc() +\n    theme(\n      plot.title = element_textbox_simple(size = rel(1.2), margin = ggplot2::margin(0, 0, .25, 0, unit = \"cm\"), family=\"Oswald\"),\n      plot.subtitle = element_textbox_simple(size = rel(.9), color = \"grey30\", face = \"italic\", family='Roboto Condensed', margin = ggplot2::margin(0, 0, b = 1, 0, unit = \"cm\")),\n      axis.title.x = element_blank(),\n      axis.title.y = element_blank(),\n      axis.text.y = element_text(size = rel(.8)),\n      axis.text.x = element_text(size = rel(.8)),\n      panel.background = element_rect(fill = \"white\", color = NA),\n      plot.background = element_rect(fill = \"white  \", color = NA),\n      panel.border = element_blank(),\n      plot.title.position = \"plot\",\n      plot.margin = ggplot2::margin(l = 0, 0, 0, 0, \"cm\"),\n      legend.position = \"top\",\n      legend.margin = ggplot2::margin(l = 0, 0, 0, 0, \"cm\"),\n      legend.justification = \"left\",\n      legend.location = \"plot\",\n      legend.title = element_blank(),\n      plot.caption = element_textbox_simple(hjust = 0, color = \"grey30\", margin=ggplot2::margin(t=0.5, unit=\"cm\"))\n    )\n}\n\ntheme_set(theme_post())\n\n#define caption\ntxt_caption_graph &lt;- \"Data: https:&#47;&#47;www.parlament.gv.at&#47;recherchieren&#47;open-data&lt;br&gt;Analysis: Roland Schmidt | @zoowalk | &lt;span style='font-weight:400'&gt;https:&#47;&#47;werk.statt.codes&lt;/span&gt;\""
  },
  {
    "objectID": "posts/2024-09-09-call-for-order/index.html#api-call",
    "href": "posts/2024-09-09-call-for-order/index.html#api-call",
    "title": "Calls to Order in Austria’s Parliament",
    "section": "2.2 API call",
    "text": "2.2 API call\nHaving wrapped the API endpoint, {ParlAT} makes retrieving the (raw) data a one stop process.\n\n\nGet all Calls to Order via ParlAT\ndf_calls &lt;- ParlAT::get_item(institution = \"Nationalrat\", item = \"GO\", doc_type = \"GO09\") %&gt;%\n  as_tibble() %&gt;%\n  mutate(datum = lubridate::dmy(datum)) %&gt;%\n  arrange(datum) %&gt;%\n  mutate(call_id = row_number(), .before = 1)\n## &gt;&gt; {\"NRBR\":[\"NR\"],\"VHG\":[\"GO\"],\"DOKTYP\":[\"GO09\"]}\n## [1] 766\n\n#preview results\ndf_calls %&gt;% glimpse()\n## Rows: 766\n## Columns: 32\n## $ call_id     &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n## $ gp_code     &lt;chr&gt; \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\"…\n## $ ityp        &lt;chr&gt; \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\"…\n## $ inr         &lt;chr&gt; \"45\", \"49\", \"50\", \"51\", \"52\", \"54\", \"53\", \"55\", \"56\", \"57\"…\n## $ zukz        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n## $ datum       &lt;date&gt; 1996-02-27, 1996-03-13, 1996-03-20, 1996-03-21, 1996-05-2…\n## $ art         &lt;chr&gt; \"GO09\", \"GO09\", \"GO09\", \"GO09\", \"GO09\", \"GO09\", \"GO09\", \"G…\n## $ betreff     &lt;chr&gt; \"Präsident MMag. Dr. Brauneder - Abg. Haidlmayr\", \"Präside…\n## $ nummer      &lt;chr&gt; \"45/GO\", \"49/GO\", \"50/GO\", \"51/GO\", \"52/GO\", \"54/GO\", \"53/…\n## $ datumsort   &lt;chr&gt; \"19960227\", \"19960313\", \"19960320\", \"19960321\", \"19960523\"…\n## $ phasen_bis  &lt;chr&gt; \"05\", \"05\", \"05\", \"05\", \"05\", \"05\", \"05\", \"05\", \"05\", \"05\"…\n## $ status      &lt;chr&gt; \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\"…\n## $ doktyp      &lt;chr&gt; \"GO09\", \"GO09\", \"GO09\", \"GO09\", \"GO09\", \"GO09\", \"GO09\", \"G…\n## $ zust        &lt;chr&gt; \"ZZZZ\", \"ZZZZ\", \"ZZZZ\", \"ZZZZ\", \"ZZZZ\", \"ZZZZ\", \"ZZZZ\", \"Z…\n## $ doktyp_lang &lt;chr&gt; \"Ordnungsruf\", \"Ordnungsruf\", \"Ordnungsruf\", \"Ordnungsruf\"…\n## $ his_url     &lt;chr&gt; \"/gegenstand/XX/GO/45\", \"/gegenstand/XX/GO/49\", \"/gegensta…\n## $ rss_desc    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n## $ datum_von   &lt;chr&gt; \"1996-02-27T12:00:00\", \"1996-03-13T12:00:00\", \"1996-03-20T…\n## $ vhg         &lt;chr&gt; \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\", \"GO\"…\n## $ vhg2        &lt;chr&gt; \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"…\n## $ lz_buttons  &lt;chr&gt; \"&lt;button&gt; &lt;i class=\\\"fa-bookmark fal gold\\\"&gt;&lt;/i&gt;&lt;span clas…\n## $ personen    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n## $ fraktionen  &lt;chr&gt; \"[\\\"GRÜNE\\\"]\", \"[\\\"ÖVP\\\"]\", \"[\\\"F\\\"]\", \"[\\\"F\\\"]\", \"[\\\"GRÜN…\n## $ themen      &lt;chr&gt; \"[\\\"Parlament und Demokratie\\\"]\", \"[\\\"Parlament und Demokr…\n## $ sw          &lt;chr&gt; \"[\\\"Ordnungsrufe\\\"]\", \"[\\\"Ordnungsrufe\\\"]\", \"[\\\"Ordnungsru…\n## $ eurovoc     &lt;chr&gt; \"[\\\"Parlamentssitzung\\\"]\", \"[\\\"Parlamentssitzung\\\"]\", \"[\\\"…\n## $ sysdate     &lt;chr&gt; \"Tue Oct 01 20:32:47 CEST 2024\", \"Tue Oct 01 20:32:47 CEST…\n## $ wentry_id   &lt;chr&gt; \"1080172\", \"1080181\", \"1080183\", \"1080185\", \"1080187\", \"10…\n## $ inrnum      &lt;chr&gt; \"45\", \"49\", \"50\", \"51\", \"52\", \"54\", \"53\", \"55\", \"56\", \"57\"…\n## $ nr_gp_code  &lt;chr&gt; \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\", \"XX\"…\n## $ nrbr        &lt;chr&gt; \"NR\", \"NR\", \"NR\", \"NR\", \"NR\", \"NR\", \"NR\", \"NR\", \"NR\", \"NR\"…\n## $ gruppe      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n\n\n\n2.2.1 Quality check\nWe have now data on each Call to Order, including the speaker’s party affiliation (fraktionen) and an url leading to further details of him or her (his_url). But while working with it, I noticed some inconsistencies which required a few further steps.\nAt a first look, we might be tempted to think that each element of fraktionen contains one element, i.e. the party to which the speaker is affiliated.\n\n\nCode\ndf_calls %&gt;%\n  mutate(fraktionen_length = map_dbl(fraktionen, \\(x) length(x))) %&gt;%\n  count(fraktionen_length)\n## # A tibble: 1 × 2\n##   fraktionen_length     n\n##               &lt;dbl&gt; &lt;int&gt;\n## 1                 1   766\n\n\nA second glimpse of fraktionen, however, reveals that the format of the stored data looks somewhat peculiar for a character vector.\n\n\nCheck content of fraktionen\ndf_calls$fraktionen[1:10]\n##  [1] \"[\\\"GRÜNE\\\"]\" \"[\\\"ÖVP\\\"]\"   \"[\\\"F\\\"]\"     \"[\\\"F\\\"]\"     \"[\\\"GRÜNE\\\"]\"\n##  [6] \"[\\\"F\\\"]\"     \"[\\\"SPÖ\\\"]\"   \"[\\\"SPÖ\\\"]\"   \"[\\\"F\\\"]\"     \"[\\\"SPÖ\\\"]\"\n\n\nIn fact, the data is stored in a json format. Let’s convert it and parse it into plain text.\n\n\nParse json\ndf_calls &lt;- df_calls %&gt;%\n  mutate(fraktionen = future_map(fraktionen, \\(x) jsonlite::fromJSON(x)))\n\n\nAs it turns out now, there are a few instances in which we have more than one party under fraktionen for a single Call to Order.\n\n\nCheck number of entries in fraktionen\ndf_calls %&gt;%\n  mutate(fraktionen_length = map_dbl(fraktionen, \\(x) length(x))) %&gt;%\n  count(fraktionen_length)\n## # A tibble: 2 × 2\n##   fraktionen_length     n\n##               &lt;dbl&gt; &lt;int&gt;\n## 1                 1   758\n## 2                 2     8\n\ndf_check &lt;- df_calls %&gt;%\n  mutate(fraktionen_length = map_dbl(fraktionen, \\(x) length(x))) %&gt;%\n  filter(fraktionen_length &gt; 1) %&gt;%\n  mutate(fraktionen = map_chr(fraktionen, \\(x) paste(x, collapse = \", \"))) %&gt;%\n  select(call_id, betreff, fraktionen, his_url)\ndf_check\n## # A tibble: 8 × 4\n##   call_id betreff                                             fraktionen his_url\n##     &lt;int&gt; &lt;chr&gt;                                               &lt;chr&gt;      &lt;chr&gt;  \n## 1     284 Präsident Mag. Dr. Graf - Abg. Mag. Kogler          FPÖ, GRÜNE /gegen…\n## 2     285 Präsident Mag. Dr. Graf - Abg. Mag. Lapp            FPÖ, SPÖ   /gegen…\n## 3     286 Präsidentin Mag. Prammer - Abg. Dipl.-Ing. Pirklhu… SPÖ, GRÜNE /gegen…\n## 4     287 Präsident Mag. Dr. Graf - Abg. Dr. Strutz           FPÖ, BZÖ   /gegen…\n## 5     288 Präsidentin Mag. Prammer - Mag. Stadler             BZÖ, SPÖ   /gegen…\n## 6     289 Präsident Neugebauer - Abg. Dr. Pilz gem. § 103 Ab… GRÜNE, ÖVP /gegen…\n## 7     292 Präsidentin Mag. Prammer - Abg. Mag. Stadler        BZÖ, SPÖ   /gegen…\n## 8     331 Präsidentin Mag. Prammer - Abg. Kopf                ÖVP, SPÖ   /gegen…\n\n\nI think what happened here is that on a few occasions the creator of the dataset added also the party affiliation of the president of the National Council, who issued the Call to Order. The complicating factor, however, is that in a few cases the order in which the parties were added is not in line with the order in which the president and the speaker appear. E.g. in call_id 292 President Prammer would be a member of the BZÖ and MP Stadler a member of the SPÖ. And while the Austrian Parliament has been full of surprises, we can definitely rule this one out.\nLet me emphasize at this point that the error in the data is not a big deal in the bigger picture. There are 8 rows out of 766 which make some troubles. So kudos to the data set creators, the issue is marginal. However, for the sake of correctness and maybe also to save some troubles for those who work with this data at a laster stage, let’s see how we can deal with it programmatically (instead of editing the data set manually)."
  },
  {
    "objectID": "posts/2024-09-09-call-for-order/index.html#a-more-robust-approach",
    "href": "posts/2024-09-09-call-for-order/index.html#a-more-robust-approach",
    "title": "Calls to Order in Austria’s Parliament",
    "section": "2.3 A more robust approach",
    "text": "2.3 A more robust approach\nFrom the description field betreff of the call, let’s first isolate the name of the speaker who was called to order.\n\n\nExtract speaker’s name from raw text\ndf_calls &lt;- df_calls %&gt;%\n  # remove part on President\n  mutate(mp = str_remove(betreff, regex(\"^.*?-\\\\s\")), .after = \"betreff\") %&gt;%\n  # remove \"Abgeordnete/r\" %&gt;%\n  mutate(mp = str_remove(mp, regex(\"^Abgeord\\\\S+\"))) %&gt;%\n  # remove trailing acad titles after comma\n  mutate(mp = str_remove(mp, regex(\",.*$\"))) %&gt;%\n  # remove leading title ending on a dot, including Abg. and acad titles\n  mutate(mp = str_remove_all(mp, regex(\"\\\\S*\\\\.\\\\s\"))) %&gt;%\n  # remove academic titles comprising multiple captial letters\n  mutate(mp = str_remove(mp, regex(\"\\\\p{Lu}+\\\\p{Ll}*\\\\p{Lu}+\\\\p{Ll}*\\\\b\"))) %&gt;%\n  # remove bracket elements\n  mutate(mp = str_remove_all(mp, regex(\"\\\\([^\\\\(]*\\\\)\"))) %&gt;%\n  # remove § reference\n  mutate(mp = str_remove(mp, regex(\"§\\\\s\\\\d+.*$\"))) %&gt;%\n  mutate(mp = str_trim(mp) %&gt;% str_squish())\n\ndf_calls %&gt;%\n  slice_head(., n = 10) %&gt;%\n  select(call_id, betreff, mp, his_url)\n## # A tibble: 10 × 4\n##    call_id betreff                                            mp        his_url \n##      &lt;int&gt; &lt;chr&gt;                                              &lt;chr&gt;     &lt;chr&gt;   \n##  1       1 Präsident MMag. Dr. Brauneder - Abg. Haidlmayr     Haidlmayr /gegens…\n##  2       2 Präsident Dr. Neisser - Abg. Dr. Maitz             Maitz     /gegens…\n##  3       3 Präsident MMag. Dr. Brauneder - Abg. Wenitsch      Wenitsch  /gegens…\n##  4       4 Präsident Dr. Fischer - Abg. Dr. Haider            Haider    /gegens…\n##  5       5 Präsident MMag. Dr. Brauneder - Abg. Wabl          Wabl      /gegens…\n##  6       6 Präsident MMag. Dr. Brauneder - Abg. Dr. Haider    Haider    /gegens…\n##  7       7 Präsident MMag. Dr. Brauneder - Abg. Dr. Heindl    Heindl    /gegens…\n##  8       8 Präsident MMag. Dr. Brauneder - Abg. Leikam        Leikam    /gegens…\n##  9       9 Präsident MMag. Dr. Brauneder - Abg. Dr. Pumberger Pumberger /gegens…\n## 10      10 Präsident Dr. Neisser - Abg. Dr. Mertel            Mertel    /gegens…\n\n\nIn a second step, let’s use the his_url link which provides us with more details on the Call to Order. For this we first define a function, and subsequently apply it.\n\n\nDefine function to get speaker details via his_url\nfn_get_person_details &lt;- function(url_call) {\n\n  link_file_json &lt;- glue::glue(\"https://www.parlament.gv.at{url_call}?json=TRUE\")\n\n  li_details &lt;- tryCatch(\n    {\n      jsonlite::fromJSON(link_file_json)\n    },\n    error = function(e) {\n      # warning(paste(\"Error reading JSON from URL:\", e$message))\n      return(NULL)\n    }\n  )\n\n  if (is.null(li_details)) {\n    return(NA)\n  }\n\n  if (!is.null(li_details$content$names)) {\n    res &lt;- li_details$content$names %&gt;%\n      select(-funktext, -portrait) %&gt;%\n      mutate(pad_intern = str_extract(url, regex(\"\\\\d+$\")))\n    return(res)\n  } else {\n    return(NA)\n  }\n}\n\n\nTo make the new approach clear, let’s zoom in on one single example, the Parmmer - Stadler call mentioned earlier.\n\n\nExample Call to Order details\nurl_call &lt;- \"/gegenstand/XXIV/GO/128\"\nfn_get_person_details(url_call)\n##                   name frak_code          url pad_intern\n## 1 Mag. Barbara Prammer         S /person/4476       4476\n## 2   Mag. Ewald Stadler         B /person/2849       2849\n\n\nOur function querying the call’s details also returns two names. This time, however, the name and the party affiliation are correct: Prammer (S=SPÖ) and Stadler (B=BZÖ). While the data in the call’s details does not indicate who is the president and who is the speaker called to order, we can infer this due to our previous step where we extracted the name of the speaker from the call’s description field betreff. Hence, in those cases where two names were mentioned, we only have to keep the entry where the name of the speaker extracted from the call’s description matches the name extracted from the call’s details. This will yield the correct party affiliation.\n\n\nApply function to get speaker’s details\n# apply function\ndf_calls &lt;- df_calls %&gt;%\n  mutate(person_details = future_map(his_url, \\(x) fn_get_person_details(url_call = x), .progress = TRUE))\n\n# unnest (1 row per person)\ndf_calls_rev &lt;- df_calls %&gt;%\n  unnest_longer(person_details, keep_empty = TRUE) %&gt;%\n  unnest_wider(person_details, names_sep = \"_\") %&gt;%\n  mutate(row_id = row_number())\nnrow(df_calls_rev)\n## [1] 774\n\n# check for duplicates, i.e. where a Call to Order has more than one person\ndf_dupes &lt;- janitor::get_dupes(df_calls_rev, call_id) %&gt;%\n  select(row_id, call_id, betreff, mp, person_details_name, person_details_frak_code) %&gt;%\n  # remove those where names don't match\n  filter(!str_detect(person_details_name, regex(mp)))\n\n# remove duplicates\ndf_calls_rev_filtered &lt;- df_calls_rev %&gt;%\n  anti_join(., df_dupes, \"row_id\")\nnrow(df_calls_rev_filtered)\n## [1] 766\nnrow(df_calls)\n## [1] 766\n\ndf_calls &lt;- df_calls_rev_filtered\n\n\nNow, let’s check whether there are some remaining rows - where we had only one person mentioned - where the extracted name from the call’s description does not match the name of the MP extracted via the person’s details.\n\n\nCheck again\ndf_calls %&gt;%\n  filter(!str_detect(person_details_name, regex(mp))) %&gt;%\n  select(call_id, mp, person_details_name, person_details_frak_code)\n## # A tibble: 8 × 4\n##   call_id mp                   person_details_name        person_details_frak_…¹\n##     &lt;int&gt; &lt;chr&gt;                &lt;chr&gt;                      &lt;chr&gt;                 \n## 1      24 Partik-Pable         Dr. Helene Partik-Pablé    F                     \n## 2      99 Bauer Rosemarie      Rosemarie Bauer            V                     \n## 3     115 Partik-Pable         Dr. Helene Partik-Pablé    F                     \n## 4     117 Partik-Pable         Dr. Helene Partik-Pablé    F                     \n## 5     152 Westenthaler         Dr. Heinz Fischer          S                     \n## 6     235 Mayer Elmar          Elmar Mayer                S                     \n## 7     607 für Inneres Nehammer Karl Nehammer, MSc         V                     \n## 8     740 Maria Niss           Mag. Dr. Maria Theresia N… V                     \n## # ℹ abbreviated name: ¹​person_details_frak_code\n\n\nBy in large the result looks fine. Partik-Pablé wasn’t matched because of an accent, a few others because family name and given names were swapped. However, there is one call which is obviously wrong. Call_id 152 features MP Westenthaler as a member of the SPÖ, and the call’s details page features only the Council’s then president Heinz Fischer. This entry has to be corrected.\n\n\nCorrect wrong call\nParlAT::get_persons(names = \"Westenthaler\")\n## &gt;&gt; {}\n##   pad_intern                     name gender                     position\n## 1       2723 Westenthaler Peter, Ing.      M Abgeordneter zum Nationalrat\n##           link\n## 1 /person/2723\n\ndf_calls &lt;- df_calls %&gt;%\n  mutate(fraktionen = ifelse(call_id == 152, \"F\", fraktionen)) %&gt;%\n  mutate(person_details_name = ifelse(call_id == 152, \"Peter Westenthaler\", person_details_name)) %&gt;%\n  mutate(person_details_frak_code = ifelse(call_id == 152, \"F\", person_details_frak_code)) %&gt;%\n  mutate(person_details_pad_intern = ifelse(call_id == 152, \"2723\", person_details_pad_intern)) %&gt;%\n  mutate(person_details_url = ifelse(call_id == 152, \"/person/2723\", person_details_url))\n\n\nNow, as a final check - let’s see whether there are some missing observations.\n\n\nCheck for missing data\nvisdat::vis_miss(df_calls)\n\n\n\n\n\n\n\n\n\nCheck for missing data\n\ndf_na &lt;- df_calls %&gt;%\nfilter(if_any(starts_with(\"person_details\"), \\(x) is.na(x))) %&gt;%\nselect(call_id, gp_code, datum, betreff, mp, fraktionen, his_url, starts_with(\"person_details\"))\ndf_na\n## # A tibble: 10 × 11\n##    call_id gp_code datum      betreff                   mp    fraktionen his_url\n##      &lt;int&gt; &lt;chr&gt;   &lt;date&gt;     &lt;chr&gt;                     &lt;chr&gt; &lt;list&gt;     &lt;chr&gt;  \n##  1     104 XXI     2000-09-20 Generiert                 Gene… &lt;chr [1]&gt;  /gegen…\n##  2     111 XXI     2000-11-23 Präsident Dipl.-Ing. Pri… Edli… &lt;chr [1]&gt;  /gegen…\n##  3     112 XXI     2000-11-23 Präsident Dipl.-Ing. Pri… West… &lt;chr [1]&gt;  /gegen…\n##  4     113 XXI     2000-11-24 Präsident Dipl.-Ing. Pri… Haig… &lt;chr [1]&gt;  /gegen…\n##  5     118 XXI     2000-12-06 Präsident Dr. Fischer - … Schw… &lt;chr [1]&gt;  /gegen…\n##  6     119 XXI     2001-02-01 Präsident Dr. Fischer - … Pirk… &lt;chr [1]&gt;  /gegen…\n##  7     120 XXI     2001-02-01 Präsident Dr. Fasslabend… Stoi… &lt;chr [1]&gt;  /gegen…\n##  8     151 XXI     2002-05-23 Präsident Dr. Fischer - … Parn… &lt;chr [1]&gt;  /gegen…\n##  9     166 XXII    2003-10-23 Präsident Dr. Khol - Abg… Krai… &lt;chr [1]&gt;  /gegen…\n## 10     305 XXIV    2010-07-07 Präsident Mag. Dr. Graf … Kogl… &lt;chr [1]&gt;  /gegen…\n## # ℹ 4 more variables: person_details_name &lt;chr&gt;,\n## #   person_details_frak_code &lt;chr&gt;, person_details_url &lt;chr&gt;,\n## #   person_details_pad_intern &lt;chr&gt;\nnrow(df_na)\n## [1] 10\n\n\nAs it turns out there are 10 calls, where details on the call are missing. Trying to extract the peratining data from his_url did not yield any result, i.e. the person’s name, party affiliation, or id. While we have the first two elements already available from the source, we want to double check its veracity as we did with all other rows.\nFor situations like this one, where one has only the name of an MP and wants to retrieve further details about him or her, the {ParlAT} package will provide the get_person function. Below we apply this function to the names extracted from betreff to get the missing data.\nAt this point let me also highlight the wonderful, relatively new rows_patch function of the dplyr package. In cases where I previously used a e.g. a join followed by a coalesce function, rows_patch does it all in one step.\n\n\nFill missing data\n#apply function for the data of the call\ndf_na &lt;- df_na %&gt;%\n    mutate(data = map2(mp, datum, \n    possibly(\n      \\(x,y) get_persons(names = x, date = y, search_strict = TRUE, institution = \"Nationalrat\", mandates = TRUE),\n      otherwise = NA\n    )\n  ))\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n## &gt;&gt; {\"PERSART\":[\"NR\"]}\n\n#extract details on MP who was called to order\ndf_na &lt;- df_na %&gt;%\nmutate(person_details_name=map_chr(data, \\(x) pluck(x, \"name\", .default=NA))) %&gt;%\nmutate(person_details_pad_intern=map_chr(data, \\(x) pluck(x, \"pad_intern\", .default=NA)))  %&gt;% \nmutate(person_details_url=glue::glue(\"/person/{person_details_pad_intern}/\"))  %&gt;% \nmutate(person_details_frak_code=map_chr(data, \\(x) pluck(x, \"mandates_wahlpartei\", .default=NA)))  \n\n#insert new data into NA fields\ndf_calls &lt;- df_calls %&gt;% dplyr::rows_patch(.,\n  df_na %&gt;% select(-data), by=\"call_id\"\n)\n\n\nNow let’s check again whether the data obtained contained via the initial API call and the data retrieved by calling the details pages are congruent.\n\n\nCheck for data inconsistencies\n#compare `fraktionen` and `person_details_frak_code_long`; should be the same\n\n#standardize person_details_frak_code\nvec_party_abbrev &lt;- c(\"G\"=\"GRÜNE\", \"V\"=\"ÖVP\", \"F\"=\"FPÖ\", \"S\"=\"SPÖ\", \"L\"=\"LIBERALES FORUM\", \"B\"=\"BZÖ\", \"A\"=\"Andere\", \"T\"=\"STRONACH\", \"N\"=\"NEOS\", \"P\"=\"PILZ\", \"J\"=\"JETZT\")\n\ndf_calls &lt;- df_calls %&gt;%\nmutate(\n  person_details_frak_code_long=coalesce(vec_party_abbrev[person_details_frak_code],person_details_frak_code)\n)\n\n#standardize fraktionen\nlook_up_2 &lt;- c(\"F\"=\"FPÖ\", \"L\"=\"LIBERALES FORUM\", \"Pilz\"=\"PILZ\")\n\ndf_calls &lt;- df_calls %&gt;%\nmutate(fraktionen_chr=map_chr(fraktionen, \\(x) str_c(x, collapse=\", \"))) %&gt;%\nmutate(\n  fraktionen_chr=coalesce(look_up_2[fraktionen_chr], fraktionen_chr)\n) \n\n#check difference\ndf_check &lt;- df_calls %&gt;%\nselect(\n  datum, betreff, fraktionen_chr, \n  his_url,\n  person_details_frak_code_long\n) %&gt;%\nfilter(!str_detect(fraktionen_chr, regex(person_details_frak_code_long)))\n#non-matched call\ndf_calls %&gt;%\nfilter(is.na(person_details_frak_code_long)) %&gt;%\nselect(call_id, betreff, his_url)\n## # A tibble: 1 × 3\n##   call_id betreff   his_url               \n##     &lt;int&gt; &lt;chr&gt;     &lt;chr&gt;                 \n## 1     104 Generiert /gegenstand/XXI/GO/373\n\n#remove call_id 104\ndf_calls &lt;- df_calls  %&gt;%\n  filter(call_id!=104)\n\n\nAs we can see, there was one call which must have some kind of dummy data (‘Generiert’). I remove it from the further analysis."
  },
  {
    "objectID": "posts/2024-09-09-call-for-order/index.html#adding-mandate-type",
    "href": "posts/2024-09-09-call-for-order/index.html#adding-mandate-type",
    "title": "Calls to Order in Austria’s Parliament",
    "section": "2.4 Adding mandate type",
    "text": "2.4 Adding mandate type\nThe steps above not only gave us the correct name of the person called to order, it also gave us the person’s pad_intern, its unique id. With this id, we can - using again a new function of the {ParlAT} package - easily query the relevant political mandate of a specific person at a specific date.\n\n\nAdd speaker’s mandate\n#apply function\ndf_calls &lt;- df_calls %&gt;%\n  mutate(mandate_li = future_map2(person_details_pad_intern, datum, \\(x, y) get_mandates(pad_intern = x, date = y, institution = NULL), .progress = TRUE))\n\n#extract mandate\ndf_calls &lt;- df_calls %&gt;%\n  mutate(mandate = map_chr(mandate_li, \\(x) pluck(x, \"mandat\", .default = NA) %&gt;% str_c(., collapse = \", \"))) %&gt;%\n  mutate(mandate_short = case_when(\n    str_detect(mandate, regex(\"Abgeord\\\\w+\")) ~ \"MP\",\n    .default = mandate\n  ))\n\ndf_calls %&gt;%\n  count(mandate_short)\n## # A tibble: 2 × 2\n##   mandate_short                  n\n##   &lt;chr&gt;                      &lt;int&gt;\n## 1 Bundesminister für Inneres     1\n## 2 MP                           764\n\n\nSo as it turns out, of the the 765 Calls to Order which were issued since the start of the 20the legislative period, there has been only a single instance in which the call was issued for a member of the government bench, more precisely, the Minister of Interior. Let’s get the name.\n\n\nGet Call to Order for Gov member\ndf_calls %&gt;%\nfilter(mandate_short!=\"MP\") %&gt;%\nselect(call_id, betreff, person_details_name, his_url)\n## # A tibble: 1 × 4\n##   call_id betreff                                    person_details_name his_url\n##     &lt;int&gt; &lt;chr&gt;                                      &lt;chr&gt;               &lt;chr&gt;  \n## 1     607 Präsidentin Bures - BM für Inneres Nehamm… Karl Nehammer, MSc  /gegen…\n\n\nThe answer is: Karl Nehammer, the current Chancellor and top candidate of the ÖVP for the upcoming elections is the only member of government who has ever been subject to a Call to Order (since the availability of pertaining data/the beginning of the XX legislative period). Details on the Call can be found here."
  },
  {
    "objectID": "posts/2024-09-09-call-for-order/index.html#calls-per-legislative-period",
    "href": "posts/2024-09-09-call-for-order/index.html#calls-per-legislative-period",
    "title": "Calls to Order in Austria’s Parliament",
    "section": "3.1 Calls per legislative period",
    "text": "3.1 Calls per legislative period\nAs a first step, let’s get the number of Calls to Order per party and legislative period. I find the result rather remarkable. The number of calls directed at members of the FPÖ during the legislative period XXVII is unprecedented, even when considering the particular length of the period.\n\n\nNumber of calls per party and legislative period\nvec_party_colors &lt;- c(\n  \"ÖVP\" = \"#63C3D0\",\n  \"SPÖ\" = \"#E4001B\",\n  \"FPÖ\" = \"#0056A2\",\n  \"GRÜNE\" = \"#88B626\",\n  \"NEOS\" = \"#E84188\",\n  \"PILZ\" = \"#E0E0E0\",  # Same as Liste Pilz\n  \"STRONACH\" = \"#F7B200\",\n  \"BZÖ\" = \"#FF6600\",\n  \"LIBERALES FORUM\"=\"#FFCA23\",\n  \"Andere\" = \"#999999\"  # Medium gray for \"Others\"\n)\n\nlvls_party &lt;- names(vec_party_colors)\n\nvec_party_labels &lt;- c(\n   \"GRÜNE\" = \"G\",\n  \"ÖVP\" = \"V\",\n  \"FPÖ\" = \"F\",\n  \"SPÖ\" = \"S\",\n  \"BZÖ\" = \"B\",\n  \"Andere\" = \"A\", \n  \"LIBERALES FORUM\"=\"L\",\n  \"STRONACH\" = \"TS\",\n  \"NEOS\" = \"N\",\n  \"PILZ\" = \"P\",  # Same as Liste Pilz\n  \"JETZT\" = \"J\"  # White, as it was also associated with Liste Pilz\n)\n\nfn_labels &lt;- function(x) {\n\n  label_clean &lt;- str_remove(x, regex(\"^.*_\"))\n\n  vec_party_labels[label_clean]\n\n}\n\n#collapse PILZ and Jetzt into PILZ; treat them as one;\ndf_n &lt;- df_calls %&gt;%\n  mutate(person_details_frak_code_long=case_when(\n    person_details_frak_code_long %in% c(\"PILZ\", \"JETZT\") ~ \"PILZ\",\n    .default=person_details_frak_code_long)) %&gt;%\n  group_by(gp_code, person_details_frak_code_long) %&gt;%\n  summarise(n = n()) %&gt;%\n  arrange(desc(n), .by_group = T) %&gt;%\n  mutate(gp_fraktionen = paste(gp_code, person_details_frak_code_long, sep = \"_\")) %&gt;%\n  mutate(gp_fraktionen = forcats::fct_inorder(gp_fraktionen)) %&gt;%\n  ungroup() |&gt; \n  mutate(person_details_frak_code_long=forcats::fct(person_details_frak_code_long, levels=lvls_party))\n\ndf_legis &lt;- ParlAT::get_legis_period() %&gt;%\nmutate(date_end=case_when(\n  legis_period_current==TRUE ~ lubridate::today(),\n  .default=date_end\n)) %&gt;%\nmutate(\n  duration_days=difftime(date_end, date_start, units=\"days\")\n) %&gt;%\nmutate(\n  date_start_formated=stringi::stri_datetime_format(date_start, format=\"MMM y\", locale=\"de\"),\n  date_end_formated=stringi::stri_datetime_format(date_end, format=\"MMM y\", locale=\"de\")\n) %&gt;%\nmutate(legis_period_dates=glue::glue(\"{date_start_formated}-{date_end_formated}\"))\n\ndf_n &lt;- df_n %&gt;% left_join(.,\ndf_legis %&gt;%\nselect(legis_period_rom, legis_period_dates, duration_days), by=c(\"gp_code\"=\"legis_period_rom\")) \n\n#create facet labels\ndf_n &lt;- df_n %&gt;%\n  mutate(facet_labels=case_when(\n  gp_code==\"XXVII\" ~ glue::glue(\"**Periode: {gp_code}**&lt;br&gt;&lt;span style='font-size:8pt; color:grey30; font-weight:100;'&gt;{legis_period_dates}&lt;br&gt;Dauer: {duration_days} Tage&lt;/span&gt;\"),\n  .default=glue::glue(\"**{gp_code}**&lt;br&gt;&lt;span style='color:grey30;font-size:8pt;'&gt;{legis_period_dates}, {duration_days}&lt;/span&gt;\")))\n\n#number x categories\nmaxnumcat &lt;- df_calls %&gt;%\n  distinct(gp_code, person_details_frak_code) %&gt;%\n  count(gp_code) %&gt;%\n  pull(n) %&gt;%\n  max()\n\n# fn_labeller &lt;- function(x) {\n  \n#   y &lt;- as.numeric(x) %&gt;% as.roman() %&gt;% as.character()\n#   y[1]\n#   y[1] &lt;- glue::glue(\"Legislaturperiode {y[1]}\")\n\n# return(y)\n# }\n\ntxt_subtitle &lt;- \"Der vorsitzführende Nationalratspräsident/die vorsitzführende Nationalratspräsidentin kann, wenn ein/e RednerIn die Würde des Hohen Hauses beziehungsweise einer oder eines Abgeordneten verletzt, einen Ordnungsruf aussprechen. Daten dazu sind auf der Homepage des Parlaments ab der 20. Legislaturperiode verfügbar. Seit diesem Zeitpunkt haben noch nie Mitglieder einer Fraktion so viele Ordnungsrufe innerhalb einer Legislaturperiode bekommen, wie jene der FPÖ in der vergangenen Legislaturperiode XXVII.\"\n\ndf_calls |&gt; \n  filter(person_details_frak_code_long==\"Andere\") |&gt; \n  select(betreff, starts_with(\"person\")) \n## # A tibble: 6 × 7\n##   betreff personen person_details_name person_details_frak_…¹ person_details_url\n##   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;               &lt;chr&gt;                  &lt;chr&gt;             \n## 1 Präsid… &lt;NA&gt;     Josef Jury          A                      /person/51576     \n## 2 Präsid… &lt;NA&gt;     Gerhard Huber       A                      /person/51575     \n## 3 Präsid… &lt;NA&gt;     Maximilian Linder   A                      /person/51577     \n## 4 Präsid… &lt;NA&gt;     Josef Jury          A                      /person/51576     \n## 5 Präsid… &lt;NA&gt;     Dr. Marcus Franz    A                      /person/83141     \n## 6 Präsid… &lt;NA&gt;     Dr. Marcus Franz    A                      /person/83141     \n## # ℹ abbreviated name: ¹​person_details_frak_code\n## # ℹ 2 more variables: person_details_pad_intern &lt;chr&gt;,\n## #   person_details_frak_code_long &lt;chr&gt;\n\nlvls_person_details_frak_code_long &lt;- c(\n  \n)\n\npl_calls_legis_period &lt;- df_n %&gt;%\n  mutate(gp_code = as.roman(gp_code) %&gt;% as.numeric()) %&gt;%\n  arrange(desc(gp_code)) %&gt;%\n  mutate(facet_labels = forcats::fct_inorder(facet_labels)) %&gt;%\n  ggplot() +\n  labs(\n    title=\"ANZAHL VON ORDNUNGSRUFEN PER PARTEI UND LEGISLATURPERIODE\",\n    subtitle=txt_subtitle,\n    caption=txt_caption_graph\n  )+\n  geom_bar(\n    aes(x = gp_fraktionen, y = n, fill=person_details_frak_code_long), \n    stat = \"identity\",\n    key_glyph = \"dotplot\") +\n  geom_text(\n    data=. %&gt;% slice_max(order_by=n, n=7),\n    aes(\n    x=gp_fraktionen, \n    y=n,\n    label=n),\n    family = \"Roboto condensed\",\n    size=3,\n    nudge_y=7\n    )+\n  scale_x_discrete(\n    limits = function(x) {\n      y &lt;- paste0(\"dummy\", seq_len(maxnumcat))\n      c(x, y[seq_len(maxnumcat - length(x))])\n    },\n    breaks = function(x) {\n      x[!startsWith(x, \"dummy\")]\n    },\n    labels = \\(x) fn_labels(x), \n    guide = guide_axis(n.dodge = 1)\n  ) +\n  scale_y_continuous(\n       expand=expansion(mult=c(0, .05)),\n  )+\n  scale_fill_manual(\n    values=vec_party_colors\n  )+\n  facet_wrap(\n    vars(facet_labels), \n    ncol = 4, \n    scales = \"free_x\"#,\n    # labeller=labeller(gp_code=fn_labeller)\n    ) +\n  theme(\n    axis.text.x.bottom=element_text(margin=ggplot2::margin(t=0, \"cm\")),\n    axis.title=element_blank(),\n    legend.title.position = \"left\",\n    legend.location = \"plot\",\n    legend.position = \"top\",\n    legend.key.height = unit(0.2, \"cm\"),\n    legend.margin = ggplot2::margin(l = 0, b = 0.2, unit = \"cm\"),\n    legend.text = element_text(hjust = 1, color = \"grey30\", face = \"italic\", size = rel(.8), margin=ggplot2::margin(l=0, unit=\"cm\")),\n    legend.box = \"vertical\",\n    legend.box.just = \"left\",\n    legend.direction = \"horizontal\",\n    panel.grid.major.x=element_blank(),\n    axis.title.x=element_blank(),\n    panel.spacing.y=unit(0.5, \"cm\"),\n    plot.caption.position=\"plot\",\n    plot.subtitle = element_textbox_simple(\n      margin = ggplot2::margin(t=0, l=0, b=.2, r=0, unit=\"cm\")\n    ),\n    strip.text = element_textbox_simple(\n      size = rel(1),\n      lineheight=.5,\n      vjust = 1\n    )\n  )+\n    guides(fill = guide_legend(nrow = 1))\n\npl_calls_legis_period"
  },
  {
    "objectID": "posts/2024-09-09-call-for-order/index.html#calls-per-individual-speakers",
    "href": "posts/2024-09-09-call-for-order/index.html#calls-per-individual-speakers",
    "title": "Calls to Order in Austria’s Parliament",
    "section": "3.2 Calls per individual speakers",
    "text": "3.2 Calls per individual speakers\nIn the next step, let’s now look at the number of Calls to Order per speakers who were disciplined.\n\n\nCalls per speaker and legislative period\n#get freqs; collapse PILZ and JETZT\ndf_calls_person_gp_n &lt;- df_calls %&gt;%\n  mutate(person_details_frak_code_long=case_when(\n    person_details_frak_code_long %in% c(\"PILZ\", \"JETZT\") ~ \"PILZ\",\n    .default=person_details_frak_code_long)) %&gt;%\n  count(\n    person_details_pad_intern, \n    gp_code, \n    person_details_frak_code_long,\n    sort = T)\n\njanitor::get_dupes(df_calls_person_gp_n, person_details_pad_intern, gp_code)\n## # A tibble: 4 × 5\n##   person_details_pad_intern gp_code dupe_count person_details_frak_code_…¹     n\n##   &lt;chr&gt;                     &lt;chr&gt;        &lt;int&gt; &lt;chr&gt;                       &lt;int&gt;\n## 1 51575                     XXIV             2 BZÖ                             4\n## 2 51575                     XXIV             2 Andere                          1\n## 3 51576                     XXIV             2 Andere                          2\n## 4 51576                     XXIV             2 FPÖ                             1\n## # ℹ abbreviated name: ¹​person_details_frak_code_long\n\n#get mps names based on pad_intern to avoid issues to due name changes\ndf_calls_person_gp_n &lt;- df_calls_person_gp_n %&gt;%\n  mutate(name = future_map(person_details_pad_intern, \\(x) ParlAT::get_names(pad_intern = x, latest = TRUE), .progress = TRUE))\n\n#extract name\ndf_calls_person_gp_n &lt;- df_calls_person_gp_n %&gt;%\n  mutate(name_chr = future_map_chr(name, \\(x) pluck(x, \"name\", .default = NA), .progress=TRUE)) %&gt;%\n  mutate(name_family_chr = future_map_chr(name, \\(x) pluck(x, \"name_family\", .default = NA), .progress=TRUE)) %&gt;%\n  select(-name)\n\ndf_calls_person_gp_n &lt;- df_calls_person_gp_n %&gt;% left_join(.,\ndf_legis %&gt;%\nselect(legis_period_rom, legis_period_dates, duration_days), by=c(\"gp_code\"=\"legis_period_rom\")) \n\ndf_calls_person_gp_n &lt;- df_calls_person_gp_n %&gt;%\n mutate(facet_labels=case_when(\n  gp_code==\"XXVII\" ~ glue::glue(\"**Periode: {gp_code}**&lt;br&gt;&lt;span style='font-size:8pt; color:grey30; font-weight:100;'&gt;{legis_period_dates}&lt;br&gt;Dauer: {duration_days} Tage&lt;/span&gt;\"),\n  .default=glue::glue(\"**{gp_code}**&lt;br&gt;&lt;span style='color:grey30;font-size:8pt;'&gt;{legis_period_dates}, {duration_days}&lt;/span&gt;\")))\n\ntxt_subtitle &lt;- \"Seit dem Beginn der 20. Legislaturperiode, dem Zeitpunkt ab dem Daten verfügbar sind, hat noch nie ein Abgeordneter so viele Ordnungsrufe bekommen wie FPÖ Chef Herbert Kickl in der 27. Legislaturperiode. In der gleichen Legislaturperiode kommen die 5 Abgeordneten mit den häufigsten Ordnungsrufen alle aus der FPÖ.\"\n\n#graph\npl_calls_legis_period_speaker &lt;- df_calls_person_gp_n %&gt;%\nslice_max(., n=5, order_by=n, by=gp_code, with_ties=FALSE) %&gt;%\nmutate(gp_code_num=as.roman(gp_code) %&gt;% as.numeric) %&gt;%\narrange(desc(gp_code_num)) %&gt;%\nmutate(facet_labels=forcats::fct_inorder(facet_labels)) %&gt;%\nmutate(person_details_frak_code_long=forcats::fct(person_details_frak_code_long, levels=lvls_party)) %&gt;%\nggplot()+\nlabs(\n  title=\"ABGEORDNETE MIT DEN MEISTEN ORDNUNGSRUFEN PER LEGISLATURPERIODE (TOP 5)\",\n  subtitle=txt_subtitle,\n  caption=txt_caption_graph\n)+\ngeom_bar(aes(\n  x=tidytext::reorder_within(name_family_chr, within=gp_code, by=-n),\n  y=n,\n  fill=person_details_frak_code_long),\n  key_glyph = \"dotplot\",\n  stat=\"identity\")+\n  geom_text(\n    data=. %&gt;% slice_max(order_by=n, n=10),\n    aes(\n      x=tidytext::reorder_within(name_family_chr, within=gp_code, by=-n),\n    y=n,\n    label=n),\n    family = \"Roboto condensed\",\n    size=3,\n    nudge_y=4\n    )+  \ntidytext::scale_x_reordered(\n  guide = guide_axis(n.dodge = 2)\n)+\nscale_fill_manual(values=vec_party_colors)+\nscale_y_continuous(expand=expansion(mult=c(0,.09)),\nbreaks=seq(0,40,20))+\nfacet_wrap(\n  vars(facet_labels),\n  scales=\"free_x\")+\n  theme(\n    axis.text.x.bottom=element_text(margin=ggplot2::margin(t=0, \"cm\")),\n    axis.title=element_blank(),\n    legend.title.position = \"left\",\n    legend.location = \"plot\",\n    legend.position = \"top\",\n    legend.key.height = unit(0.2, \"cm\"),\n    legend.margin = ggplot2::margin(l = 0, b = 0.2, unit = \"cm\"),\n    legend.text = element_text(hjust = 1, color = \"grey30\", face = \"italic\", size = rel(.8), margin=ggplot2::margin(l=0, unit=\"cm\")),\n    legend.box = \"vertical\",\n    legend.box.just = \"left\",\n    legend.direction = \"horizontal\",\n    panel.grid.minor.y=element_blank(),\n    panel.grid.major.x=element_blank(),\n    axis.title.x=element_blank(),\n    panel.spacing.y=unit(0.5, \"cm\"),\n    plot.caption.position=\"plot\",\n    plot.subtitle = element_textbox_simple(\n      margin = ggplot2::margin(t=0, l=0, b=.2, r=0, unit=\"cm\")\n    ),\n    strip.text = element_textbox_simple(\n      size = rel(1),\n      lineheight=.5,\n      vjust = 1\n    )\n  )+\n    guides(fill = guide_legend(nrow = 1))\n\npl_calls_legis_period_speaker\n\n\n\n\n\n\n\n\n\nThose privy to Austrian politics might be not surprised to see Herbert Kickl featuring most Calls to Order since the beginning of the data record. The large difference to other MPs, even his party colleagues, I find, to put it mildly, rather remarkable."
  },
  {
    "objectID": "posts/2024-09-09-call-for-order/index.html#calls-per-mp-and-mandate-days",
    "href": "posts/2024-09-09-call-for-order/index.html#calls-per-mp-and-mandate-days",
    "title": "Calls to Order in Austria’s Parliament",
    "section": "3.3 Calls per MP and mandate days",
    "text": "3.3 Calls per MP and mandate days\nSo far we have only seen the aggregate numbers of MPs’ Calls to Order. What the analysis didn’t take into consideration is the actual length of time during which an individual has been serving as an MP. There is a qualitative difference if an MP gets e.g. five calls within 15 years or within only two years.\nTo account for the different number of days in Parliament, I’ll get the start and end dates of all mandates of each MP in the National Council who got a Call to Order. Critically, since we have only data on Calls to Order since the start of legislative period XX (15.1.1996, ‘left censored data’), the days in Parliament have to be corrected accordingly. Otherwise, the comparison would be skewed in favor of those who have been serving as MPs prior to legislative period XX (the time prior to legislative period XX can’t feature Calls to Order). In other words, days served as an MP prior to 15.1.1996 are excluded from the analysis. This limitation has to be kept in mind, when interpreting the subsequent results.\nAnother caveat of the graph below pertains to the coloring of the dots, e.g. the MPs’ association with a party. Here, I used the party to which the MP belonged most recently. Some MPs have changed their party affiliation over the years, and may have been subject to a Call to Order while serving for a different party. This detail has also to be kept in mind when reading the graph.\n\n\nNumber of Calls vs Time in National Council\n#number of calls per mp in total\n#only MPs, drops call against MOI Nehammer\ndf_calls_n &lt;- df_calls %&gt;%\nfilter(mandate_short==\"MP\") %&gt;%\ncount(person_details_pad_intern, sort=TRUE) %&gt;%\nungroup()\n\n#get mandate day\nvec_pad_interns &lt;- df_calls_n %&gt;% distinct(person_details_pad_intern) %&gt;% pull()\n\n#get all NR mandates of those MPs who got a Call to Order\ndf_mandates &lt;- future_map(vec_pad_interns, \\(x) ParlAT::get_mandates(pad_intern=x, institution=\"Nationalrat\"), .progress=TRUE) %&gt;% list_rbind()\n\nvec_XX_date_start &lt;- get_legis_period(legis_period=20) %&gt;%\npull(date_start)\n\n#correct dates\ndf_mandates &lt;- df_mandates %&gt;%\nungroup() %&gt;%\n#ongoing mandates are right censored with today's date\nmutate(\n  mandatBis=case_when(\n    aktiv==TRUE & is.na(mandatBis) ~ lubridate::today(),\n    .default=mandatBis\n  )\n) %&gt;%\n#remove mandates which ended before start of legis period XX\nfilter(mandatBis&gt;vec_XX_date_start) %&gt;%\n#mandates prior to XX are cut off; \nmutate(\n  mandatVon_censored=case_when(\n    mandatVon&lt;vec_XX_date_start ~ vec_XX_date_start,\n    .default=mandatVon\n  )\n) %&gt;%\n#calcluate days in Parliament\nmutate(mp_days=difftime(mandatBis, mandatVon_censored, units=\"days\")) %&gt;%\nmutate(censored=case_when(\n    mandatVon&lt;vec_XX_date_start ~ TRUE,\n    .default=FALSE))\n\n#mp_day sum per mp\ndf_mp_days_N &lt;- df_mandates %&gt;%\ngroup_by(pad_intern) %&gt;%\nsummarise(\n  mp_days_N=sum(mp_days),\n  censored=any(censored)\n)\n#check\ntable(df_mp_days_N$censored)\n## \n## FALSE  TRUE \n##   166    50\njanitor::get_dupes(df_mp_days_N, pad_intern) %&gt;% nrow()==0\n## [1] TRUE\n\n#combine number of calls with number of days in Parliament\ndf_calls_n &lt;- df_calls_n %&gt;% left_join(., df_mp_days_N, by=c(\"person_details_pad_intern\"=\"pad_intern\"))\n\n#check for accidental dupes\nnrow(df_calls_n %&gt;% janitor::get_dupes(., person_details_pad_intern))==0\n## [1] TRUE\n\n#get names and party affiliation\ndf_pers_details &lt;- df_calls_person_gp_n %&gt;%\nmutate(gp_code_num=as.roman(gp_code) %&gt;% as.numeric) %&gt;%\narrange(desc(gp_code_num), person_details_pad_intern) %&gt;%\nslice_head(., n=1, by=c(person_details_pad_intern)) %&gt;%\nselect(\n  person_details_pad_intern,\n  gp_code, \n  person_details_frak_code_long,\n  name_family_chr\n)\n\n#checks for accidential dupes\nnrow(janitor::get_dupes(df_pers_details, person_details_pad_intern))==0\n## [1] TRUE\nnrow(df_calls_n)==nrow(df_pers_details)\n## [1] TRUE\n\ndf_calls_n &lt;- df_calls_n %&gt;%\nleft_join(., df_pers_details, by=c(\"person_details_pad_intern\"))\n\n#checks\nnrow(janitor::get_dupes(df_calls_n, person_details_pad_intern))==0\n## [1] TRUE\n\n#graph\ntxt_subtitle &lt;- \"Die Graphik zeigt wieviele Ordnungsrufe ein/e NR-Abgeordnete/r erhalten hat und setzt diese Zahl in Verhältnis mit der Anzahl an Tagen, die die Person Abgeordnete/r war. Da die Daten zu Ordnungsrufen erst mit dem Beginn der 20. Legilsaturperiode verfügbar sind (15.1.1996), werden hier nur die Abgeordneten-Tage ab diesem Datum berücksichtigt. Die Gegenüberstellung verdeutlicht die hohe Anzahl an Ordnungsrufen für FPÖ Chef Herbert Kickl. Selbst andere Abgeordnete mit ähnlicher oder auch längerer Verweildauer im Nationalrat haben weniger Ordnungsrufe bekommen. Bemerkenswert ist auch die hohe Anzahl vom aktuellen Vize-Kanzler Kogler. Die Zuordnung zu Parteien erfolgte auf Basis der letzten Parteimitgliedschaft.\"\n\npl_calls_days_in_parl &lt;- df_calls_n %&gt;%\nmutate(person_details_frak_code_long=fct(person_details_frak_code_long, lvls_party)) %&gt;%\nmutate(mp_days_N=as.numeric(mp_days_N)) %&gt;%\nggplot()+\nlabs(\n  title=\"ANZAHL ORDNUNGSRUFE UND TAGE IM NATIONALRAT PRO ABGEORDNETEM/R\",\n  subtitle=txt_subtitle,\n  y=\"Anzahl Ordungsrufe\",\n  x=\"Anzahl an Tagen im Nationlrat (ab 15.1.1996)\",\n  caption=txt_caption_graph\n)+\ngeom_point(\n  aes(\n    x=mp_days_N,\n    y=n,\n    shape=censored,\n    color=person_details_frak_code_long),\n    size=2\n)+\nggrepel::geom_text_repel(\n  data=. %&gt;% filter(mp_days_N&gt;7500 | n&gt;15),\n  aes(\n    x=mp_days_N,\n    y=n,\n    label=name_family_chr)\n)+\nscale_color_manual(values=vec_party_colors)+\nscale_x_continuous(\n  labels=scales::label_comma(decimal.mark=\",\", big.mark=\".\"),\n  breaks=seq(0,10000, 2500),\n  expand=expansion(mult=c(0.07,0.1))\n  )+\nscale_y_continuous(expand=expansion(mult=c(0.02,0.1)))+\nscale_shape_manual(\n  values=c(\n    \"TRUE\"=17, \n    \"FALSE\"=19),\n  breaks=\"TRUE\",\n  labels=c(\"TRUE\"=\"Tage vor 15.1.1996 ignoriert\")\n  )+\nguides(\n  color = guide_legend(nrow = 1, position=\"top\", order=1)\n  )+\ntheme(\n  axis.title.x=element_text(hjust=1, color=\"grey30\", family=\"Roboto Condensed\"),\n  axis.title.y=element_text(angle=90, hjust=1, color=\"grey30\", family=\"Roboto Condensed\"),\n  panel.grid.minor.y=element_blank(),\n    legend.title.position = \"left\",\n    legend.location = \"plot\",\n    legend.position = \"top\",\n    legend.key.height = unit(0.2, \"cm\"),\n    legend.margin = ggplot2::margin(l = 0, b = 0, t=0, unit = \"cm\"),\n    legend.text = element_text(hjust = 1, color = \"grey30\", face = \"italic\", size = rel(.8), margin=ggplot2::margin(l=0, unit=\"cm\")),\n    legend.box = \"vertical\",\n    legend.box.just = \"left\",\n    legend.box.margin = ggplot2::margin(l=0, t=.25, unit=\"cm\"),\n    legend.spacing.y=unit(0.05, unit=\"cm\"),\n    legend.direction = \"horizontal\",\n    plot.caption.position=\"plot\",\n    plot.subtitle = element_textbox_simple(margin = ggplot2::margin(t=0, l=0, b=.2, r=0, unit=\"cm\")\n    )\n)\n\npl_calls_days_in_parl\n\n\n\n\n\n\n\n\n\n\n3.3.1 Days per Call Ratio\nNow let’s look at the days per call ratio and divide the number of days in Parliament by the number of Calls to Order.\n\n\nDays per call ratio\ndf_day_call_ratio &lt;- df_calls_n %&gt;%\nmutate(day_call_ratio=mp_days_N/n) %&gt;%\nmutate(day_call_ratio=as.numeric(day_call_ratio)) %&gt;%\narrange(day_call_ratio) %&gt;%\n# slice_min(.,n=5, order_by=day_call_ratio) %&gt;%\nselect(\n  person_details_pad_intern,\n  name_family_chr, \n  person_details_frak_code_long,\n  day_call_ratio, \n  n,\n  mp_days_N\n  )  %&gt;%\n    mutate(party_logo = case_when(\n    person_details_frak_code_long == \"FPÖ\" ~ \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/Logo_of_Freedom_Party_of_Austria.svg/320px-Logo_of_Freedom_Party_of_Austria.svg.png\",\n    person_details_frak_code_long == \"Neos\" ~ \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/NEOS_%E2%80%93_Das_Neue_%C3%96sterreich_logo.svg/320px-NEOS_%E2%80%93_Das_Neue_%C3%96sterreich_logo.svg.png\",\n    person_details_frak_code_long == \"SPÖ\" ~ \"https://rotbewegt.at/wp-content/uploads/2023/11/SPOe-Logo-Rot500-px.png\",\n    person_details_frak_code_long== \"GRÜNE\" ~ \"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Logo_Die_Gruenen_2.svg/320px-Logo_Die_Gruenen_2.svg.png\",\n    person_details_frak_code_long== \"BZÖ\" ~ \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/BZ%C3%96-Logo.svg/240px-BZ%C3%96-Logo.svg.png\",\n    person_details_frak_code_long== \"ÖVP\" ~ \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Volkspartei_Logo_2022.svg/320px-Volkspartei_Logo_2022.svg.png\",\n    person_details_frak_code_long == \"none\" ~ \"https://upload.wikimedia.org/wikipedia/commons/d/d2/Solid_white.png\",\n    person_details_frak_code_long == \"PILZ\" ~ \"https://upload.wikimedia.org/wikipedia/commons/7/71/Liste_Peter_Pilz_Logo.png\",\n    .default = \"https://upload.wikimedia.org/wikipedia/commons/d/d2/Solid_white.png\")) %&gt;%\n    relocate(party_logo, .after=\"name_family_chr\")\n  \n#dupe check\nnrow(janitor::get_dupes(df_day_call_ratio, person_details_pad_intern))==0\n## [1] TRUE\n\n\n\ndf_day_call_ratio &lt;- df_day_call_ratio %&gt;%\nslice_min(., order_by=day_call_ratio, n=10)  %&gt;%\nselect(-mp_days_N, -person_details_pad_intern) %&gt;%\nmutate(rank=row_number(), .before=1) \n\ntxt_subtitle &lt;- \"Dividiert man für jede/n Abgeordnete/n die Anzahl der Tage als Nationalratsmitglied durch die Anzahl der erhaltenen Ordnungsrufe so erhält man die Tage-pro-Ordnungsruf Rate als relatives Häufigkeitsmaß. Sie gibt an wieviel Tage, durchschnittlich, zwischen zwei Ordnungsrufen vergehen. Je niedriger, desto relativ häufiger hat ein/e Abgeordnete/r einen Ordnungsruf erhalten. Daten für Ordnungsrufe sind ab Legislaturperiode XX verfübar; Abgeordneten-Tage davor wurden nicht berücksichtigt. Parteizugehörigkeit nach letzter Parteimitgliedschaft.\"\n\nrt_day_call_ratio &lt;- df_day_call_ratio %&gt;%\nselect(-person_details_frak_code_long) %&gt;%\nreactable(.,\ncolumns=list(\n  rank=colDef(align=\"center\", width=50),\n  name_family_chr=colDef(name=\"Name\",\n  width=100),\nday_call_ratio=colDef(\n  name=\"Tage/Ordnungsruf\",\n  width=150,\n  align=\"center\",\n  format=colFormat(digits=2)),\nn=colDef(\n  name=\"Anzahl Ordnungsrufe\", \n  align=\"center\"),\nparty_logo = colDef(\n    name=\"Partei\",\n    width = 100,\n        cell = function(value) {\n          img_src &lt;- value\n          image &lt;- htmltools::img(src = img_src, style = \"height: 12px;\", alt = value)\n          htmltools::tagList(\n            htmltools::div(style = \"display: inline-block; width: 45px\", image)\n          )\n        }\n      )\n),\n    fullWidth = TRUE,\n    compact = TRUE,\n    highlight = FALSE,\n    outlined = TRUE,\n    defaultPageSize = 23,\n    theme = fivethirtyeight(font_size = 12)\n  ) %&gt;%\n  add_title(\n    title = html(\"&lt;span style='font-size:12pt;'&gt;RELATIVE HÄUFIGKEIT VON ORDNUNGSRUFEN&lt;/span&gt;\")\n  ) %&gt;%\n  add_subtitle(\n    subtitle = reactablefmtr::html(glue::glue(\"&lt;span style='font-size:10pt;line-height:0.5;'&gt;{txt_subtitle}&lt;/span&gt;\") %&gt;% as.character),\n    font_color = \"grey30\", \n    font_weight = \"normal\", \n    font_style=\"italic\") %&gt;%\n  add_source(\n    source = html(\"&lt;span style='font-size:8pt;color:grey30;font-family:Segoe UI !important;line-height:0.5'&gt;Source: www.parlament.gv.at/recherieren/open-data. Analysis: Roland Schmidt - @zoowalk - https://werk.statt.codes&lt;/span&gt;\"))\n\nrt_day_call_ratio    \n\n\nRELATIVE HÄUFIGKEIT VON ORDNUNGSRUFEN\nDividiert man für jede/n Abgeordnete/n die Anzahl der Tage als Nationalratsmitglied durch die Anzahl der erhaltenen Ordnungsrufe so erhält man die Tage-pro-Ordnungsruf Rate als relatives Häufigkeitsmaß. Sie gibt an wieviel Tage, durchschnittlich, zwischen zwei Ordnungsrufen vergehen. Je niedriger, desto relativ häufiger hat ein/e Abgeordnete/r einen Ordnungsruf erhalten. Daten für Ordnungsrufe sind ab Legislaturperiode XX verfübar; Abgeordneten-Tage davor wurden nicht berücksichtigt. Parteizugehörigkeit nach letzter Parteimitgliedschaft.\n\nSource: www.parlament.gv.at/recherieren/open-data. Analysis: Roland Schmidt - @zoowalk - https://werk.statt.codes"
  },
  {
    "objectID": "posts/2024-06-26-euparl-2024-ballot/index.html",
    "href": "posts/2024-06-26-euparl-2024-ballot/index.html",
    "title": "Professional politicians and their position on electoral lists",
    "section": "",
    "text": "For interactive version see plots in the post below."
  },
  {
    "objectID": "posts/2024-06-26-euparl-2024-ballot/index.html#load-packages",
    "href": "posts/2024-06-26-euparl-2024-ballot/index.html#load-packages",
    "title": "Professional politicians and their position on electoral lists",
    "section": "2.1 Load packages",
    "text": "2.1 Load packages\n\n\nLoad packages\nlibrary(tidyverse)\nlibrary(tabulapdf)\nlibrary(rvest)\nlibrary(ggtext)\nlibrary(ggiraph)\nlibrary(reactable)\nlibrary(reactablefmtr)\nlibrary(htmltools)\n\n# define theme for plots\ntheme_post &lt;- function() {\n  hrbrthemes::theme_ipsum_rc() +\n    theme(\n      plot.title = element_textbox_simple(size = rel(1.2), margin = ggplot2::margin(0, 0, .25, 0, unit = \"cm\")),\n      plot.subtitle = element_textbox_simple(size = rel(.9), color = \"grey30\", face = \"italic\", family='Roboto condensed',margin = ggplot2::margin(0, 0, b = 1, 0, unit = \"cm\")),\n      axis.title.x = element_blank(),\n      axis.title.y = element_blank(),\n      axis.text.y = element_text(size = rel(.8)),\n      axis.text.x = element_text(size = rel(.8)),\n      panel.background = element_rect(fill = \"white\", color = NA),\n      plot.background = element_rect(fill = \"white  \", color = NA),\n      panel.border = element_blank(),\n      plot.title.position = \"plot\",\n      plot.margin = ggplot2::margin(l = 0, 0, 0, 0, \"cm\"),\n      legend.position = \"top\",\n      legend.margin = ggplot2::margin(l = 0, 0, 0, 0, \"cm\"),\n      legend.justification = \"left\",\n      legend.location = \"plot\",\n      legend.title = element_blank(),\n      plot.caption = element_textbox_simple(hjust = 0, color = \"grey30\", margin=ggplot2::margin(t=0.5, unit=\"cm\"))\n    )\n}\n\ntheme_set(theme_post())\n\n#define caption\ntxt_caption_graph &lt;- \"Data: https:&#47;&#47;www.bmi.gv.at; Analysis: Roland Schmidt | @zoowalk | &lt;span style='font-weight:400'&gt;https:&#47;&#47;werk.statt.codes&lt;/span&gt;\"\n\nvec_party_colors &lt;- c(\n  FPOE = \"#005DA8\", NEOS = \"#EA5290\", OEVP = \"#5DC2CC\", SPOE = \"#FC0204\", GRUENE = \"#A3C630\", KPOE=\"#E60000\", DNA=\"#CECAB7\", 'no pol' = \"darkgrey\"\n)\n\nfn_reactable_filter &lt;- function(elementId) {\n  return(function(values, name) {\n    tags$select(\n      onchange = sprintf(\"Reactable.setFilter('%s', '%s', event.target.value || undefined)\", elementId, name),\n      tags$option(value = \"\", \"All\"),\n      lapply(sort(unique(values)), tags$option),\n      \"aria-label\" = sprintf(\"Filter %s\", name),\n      style = \"width: 100%; height: 28px;\"\n    )\n  })\n}"
  },
  {
    "objectID": "posts/2024-06-26-euparl-2024-ballot/index.html#extract-data-from-electoral-lists",
    "href": "posts/2024-06-26-euparl-2024-ballot/index.html#extract-data-from-electoral-lists",
    "title": "Professional politicians and their position on electoral lists",
    "section": "2.2 Extract data from electoral lists",
    "text": "2.2 Extract data from electoral lists\nThe electoral lists are available on the website of the Austrian MoI. Here, I first identify the relevant links, load the relevant files, and then extract the data of interest.\n\n\nGet urls leading to electoral lists of each party\nvec_url &lt;- \"https://www.bmi.gv.at/412/Europawahlen/Europawahl_2024/start.aspx#parteien\"\n\nvec_links &lt;- vec_url %&gt;%\nrvest::read_html() %&gt;%\nrvest::html_elements(\"a\") %&gt;%\nrvest::html_attr(\"href\") \n\nurls &lt;- vec_links[str_detect(vec_links, regex(\"Verlautbarung_EU_Wahl_2024_Wahlvorschla\"))]  \n\nurls &lt;- urls[!is.na(urls)]\n\ndf_files &lt;- urls %&gt;% enframe(name=NULL, value=\"path\")\ndf_files\n## # A tibble: 7 × 1\n##   path                                                                          \n##   &lt;chr&gt;                                                                         \n## 1 412/Europawahlen/Europawahl_2024/files/Verlautbarung_EU_Wahl_2024_Wahlvorschl…\n## 2 412/Europawahlen/Europawahl_2024/files/Verlautbarung_EU_Wahl_2024_Wahlvorschl…\n## 3 412/Europawahlen/Europawahl_2024/files/Verlautbarung_EU_Wahl_2024_Wahlvorschl…\n## 4 412/Europawahlen/Europawahl_2024/files/Verlautbarung_EU_Wahl_2024_Wahlvorschl…\n## 5 412/Europawahlen/Europawahl_2024/files/Verlautbarung_EU_Wahl_2024_Wahlvorschl…\n## 6 412/Europawahlen/Europawahl_2024/files/Verlautbarung_EU_Wahl_2024_Wahlvorschl…\n## 7 412/Europawahlen/Europawahl_2024/files/Verlautbarung_EU_Wahl_2024_Wahlvorschl…\n\n\nTo extract the data from the obtained pdfs, I make us of the tabulapdf package.\n\n\nExtract text from electoral lists\nfn_get_tables &lt;- function(path) {\n\n# path &lt;- df_files$path[[2]]\nparty &lt;- str_extract(path, regex(\"\\\\p{Lu}+(?=\\\\.pdf$)\"))\n\npath &lt;- str_c(\"https://www.bmi.gv.at/\", path)\n\ntabulapdf::extract_tables(path)  %&gt;%\n.[[1]] %&gt;%\njanitor::clean_names() %&gt;%\nmutate(across(everything(), \\(x) as.character(x))) %&gt;%\nmutate(party=party, .before=1)\n\n}\n\ndf_res &lt;- df_files$path %&gt;%\nmap(., fn_get_tables, .progress=T) %&gt;%\nlist_rbind()\n\n\nBelow the content of the electoral lists of all parties running at the European Elections in Austria in 2024.\n\n\nTable of electoral lists\ndf_res %&gt;%\nreactable(.,\ncolumns=list(\n  lfd_nr=colDef(\n    width=50,\n    align=\"center\"\n  ),\nparty=colDef(\n  width=70,\n  name=\"partei\",\n  filterable=T,\n  filterInput = fn_reactable_filter(\"selector\")),\nberuf=colDef(width=200),\nplz=colDef(\n  width=100\n)\n),\n    fullWidth = TRUE,\n    compact = TRUE,\n    highlight = FALSE,\n    outlined = TRUE,\n    defaultPageSize = 23,\n    elementId = \"selector\",\n    filterable = T,\n    theme = fivethirtyeight(font_size = 12)\n  ) %&gt;%\n  add_title(\n    title = html(\"&lt;span style='font-size:12pt;'&gt;Electoral lists for the 2024 elections to the European Parliament in Austria.&lt;/span&gt;\")\n  ) %&gt;%\n  add_source(\n    source = html(\"&lt;span style='font-size:8pt;color:grey30;font-family:Segoe UI !important;'&gt;Source: www.bmi.gv.at/412/Europawahlen/Europawahl_2024;\"))\n\n\nElectoral lists for the 2024 elections to the European Parliament in Austria.\n\nSource: www.bmi.gv.at/412/Europawahlen/Europawahl_2024;"
  },
  {
    "objectID": "posts/2024-06-26-euparl-2024-ballot/index.html#position-on-electoral-list",
    "href": "posts/2024-06-26-euparl-2024-ballot/index.html#position-on-electoral-list",
    "title": "Professional politicians and their position on electoral lists",
    "section": "3.1 Position on electoral list",
    "text": "3.1 Position on electoral list\nOnce we have categorized the different professional occupations, we can plot these categories in relation to their position on parties’ electoral lists.\n\n\nCreate plot\ntxt_subtitle=glue::glue(\"The graph depicts the position of professional politicians on the electoral lists of the Austrian parties running in the European Parliament elections 2024. Of those parties which have already previously won a seat in the EP, only the Green party featured a non-professional politician at the top of its electoral list. In general, with the ÖVP, SPÖ and FPÖ, the most promising positions were dominated by professional politicans. In contrast, NEOS featured only one single candidate who holds a political position according to the data provided on the electoral list. Hover over the dots to get candidates' details.\")\n\ndf_candidates &lt;- df_res %&gt;%\nmutate(lfd_nr=forcats::fct_inseq(lfd_nr)) %&gt;%\nmutate(party=forcats::fct(party, levels=c(\"OEVP\", \"GRUENE\", \"SPOE\", \"FPOE\", \"NEOS\", \"KPOE\", \"DNA\")) %&gt;% fct_rev) %&gt;%\nmutate(candidate_type=case_when(\n  beruf_pol==T & str_detect(beruf, regex(\"Mitglied des Europ\\\\w+\\\\sParlaments\")) ~ \"MEP\",\n  beruf_pol==T ~ \"other politician\",\n  beruf_pol==F ~ \"no politician\",\n  .default=NA\n)) %&gt;%\nmutate(candidate_type=forcats::fct(candidate_type, levels=c(\"MEP\", \"other politician\", \"no politician\")))\n\npl_candidates &lt;- df_candidates %&gt;%\nggplot()+\nlabs(\n    title=\"European Parliament Elections 2024 in Austria: Professional Politicians and their position on the electoral list\",\n    subtitle=txt_subtitle,\n    x=\"Listenplatz *(position on ballot)*\",\n    caption=txt_caption_graph\n)+\ngeom_point_interactive(\n    aes(\n      x=lfd_nr, \n      y=party, \n      shape=candidate_type, \n      color=party, \n      group=party,\n      tooltip=glue::glue(\"{vorname} {familienname}, {beruf}\")\n      ),\n    stat=\"identity\",\n    size=5\n)+\ngeom_text(\n  aes(\n    x=lfd_nr, \n    y=party,\n    label=lfd_nr),\n  size=2,\n  color=\"black\"\n)+\nscale_y_discrete(labels=\\(x) str_replace_all(x, c(\"OE\"=\"Ö\", \"UE\"=\"Ü\")), expand=expansion(mult=c(0.15,.1)))+\nscale_shape_manual(values=c(\"no politician\"=1, \"other politician\"=16, \"MEP\"=18))+\nscale_color_manual(values=vec_party_colors)+\n# scale_fill_manual(values=vec_party_colors)+\n theme(\n    axis.title.y=element_blank(),\n    axis.title.x=element_blank(),\n    panel.background=element_rect(fill=\"transparent\"),\n    legend.position=\"top\",\n    legend.text=element_text(color=\"grey30\"),\n    panel.grid.major.x=element_blank(),\n    panel.grid.major.y=element_blank(),\n    axis.text.x=element_blank(),\n    axis.text.y=element_text(face=\"bold\"),\n    plot.subtitle=element_textbox_simple(),\n    legend.title=element_blank(),\n    plot.caption.position=\"plot\",\n    plot.caption=element_textbox_simple(margin=ggplot2::margin(t=0, unit=\"cm\"))\n )+\n guides(\n  color=\"none\",\n  fill=\"none\",\n  shape=guide_legend()\n )\n\ngi_pl_candidates &lt;- girafe(\n  ggobj = pl_candidates,\n  options = list(opts_toolbar(saveaspng = FALSE))\n)\n\ngi_pl_candidates"
  },
  {
    "objectID": "posts/2024-06-26-euparl-2024-ballot/index.html#aggregate-number-per-party",
    "href": "posts/2024-06-26-euparl-2024-ballot/index.html#aggregate-number-per-party",
    "title": "Professional politicians and their position on electoral lists",
    "section": "3.2 Aggregate number per party",
    "text": "3.2 Aggregate number per party\nNow let’s compare the aggregate number of professional politicians per party.\n\n\nGet numbers per party\ndf_pol_share &lt;- df_candidates %&gt;%\nmutate(candidate_type=fct_collapse(candidate_type, politician=c(\"MEP\", \"other politician\"))) %&gt;%\ncount(party, candidate_type, .drop=F) %&gt;%\ngroup_by(party) %&gt;%\nmutate(n_candidates_total=sum(n, na.rm=T)) %&gt;%\npivot_wider(\n  id_cols=c(party, n_candidates_total),\n  values_from=n,\n  names_from=candidate_type\n) %&gt;%\njanitor::clean_names() %&gt;%\nmutate(\n  n_rel=politician/n_candidates_total\n)  %&gt;%\narrange(desc(n_rel)) %&gt;%\nungroup()\n\nrt_pol_share &lt;- df_pol_share %&gt;%\nselect(-no_politician) %&gt;%\nmutate(party=as.character(party)) %&gt;%\nmutate(party_col = vec_party_colors[party]) %&gt;%\nmutate(party=str_replace_all(party, c(\"OE\"=\"Ö\", \"UE\"=\"Ü\"))) %&gt;%\nreactable(\n  columns=list(\n    party=colDef(\n      name=\"Party\",\n      width=75),\n    n_candidates_total=colDef(\n      name=\"on the electoral list in total\",\n      align=\"center\",\n      width=125\n      ),\n    politician=colDef(\n      name=\"who are politicians by profession\",\n      align=\"center\",\n      width=125\n      ),\n    n_rel=colDef(\n      name=\"Share of candidates who are politicians by profession\",\n      align=\"left\",\n      cell = data_bars(., fill_color_ref = \"party_col\", number_fmt = scales::label_percent(), background = \"white\", force_outside=c(0,.1))\n    ),\n    party_col=colDef(show=FALSE)\n  ),\n  columnGroups = list(\n    colGroup(name = \"Number of candidates\", \n    columns = c(\"n_candidates_total\", \"politician\"))),\n    fullWidth = TRUE,\n    compact = TRUE,\n    highlight = FALSE,\n    defaultPageSize = 23,\n    theme = nytimes(font_size = 12)\n    ) %&gt;%\n  add_title(title = html(\"&lt;span style='font-size:12pt'&gt;European Parliament Elections 2024: Number of 'professional' politicians on electoral lists in Austria&lt;/span&gt;\")) %&gt;%\n  add_subtitle(subtitle = html(\"&lt;span style='font-size:10pt'&gt;Electoral lists provide details on candidates' profession. How many candidates are professionally politicians, e.g. pursue a political mandate as a job. &lt;/span&gt;\"),  font_color = \"black\", font_weight = \"normal\") %&gt;%\n  add_source(source = html(\"&lt;span style='font-size:9pt; font-family:Segoe UI !important;'&gt;  Data: www.bmi.gv.at. Analysis: Roland Schmidt - werk.statt.codes - @zoowalk&lt;/span&gt;\"), font_size = 9, font_color = \"grey30\")\n  \nrt_pol_share\n\n\nEuropean Parliament Elections 2024: Number of 'professional' politicians on electoral lists in Austria\nElectoral lists provide details on candidates' profession. How many candidates are professionally politicians, e.g. pursue a political mandate as a job. \n\n  Data: www.bmi.gv.at. Analysis: Roland Schmidt - werk.statt.codes - @zoowalk"
  }
]