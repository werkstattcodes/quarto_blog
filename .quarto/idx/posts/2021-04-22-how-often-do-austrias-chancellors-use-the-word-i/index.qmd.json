{"title":"How often do Austria's Chancellors use the word 'I'","markdown":{"yaml":{"title":"How often do Austria's Chancellors use the word 'I'","description":"In a previous post, I detailed how to extract statements given in Austria’s parliament from the sessions’ transcripts. In this post, I use the extracted text - in combination with an already existing database on earlier sessions - to compare chancellors’ engagement with parliament and …their use of the word 'I'.","date":"11-21-2021","categories":["Austria","regex"],"filters":["lightbox"],"lightbox":"auto","image":"preview - Copy_x.png"},"headingText":"Just the results, please!","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nlibrary(tweetrmd)\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(ragg)\nlibrary(colorspace)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(reactable)\nlibrary(reactablefmtr)\n\nknitr::opts_chunk$set(echo = FALSE,\n                      knitr::opts_chunk$set(dev = \"ragg_png\"))\n\nplot_bg_color <- \"white\"\n\n\ntheme_post <- function() {\n  hrbrthemes::theme_ipsum_rc() +\n    theme(\n      plot.background = element_rect(fill = plot_bg_color, color=NA),\n      panel.background = element_rect(fill = plot_bg_color, color=NA),\n      plot.margin = ggplot2::margin(l = 0, \n                           t = 0.25,\n                           unit = \"cm\"),\n      plot.title = element_text(\n        color = \"grey20\",\n        face = \"bold\",\n        margin = ggplot2::margin(l = 0, unit = \"cm\"),\n        size = 13\n      ),\n      plot.title.position = \"plot\",\n      plot.subtitle = element_text(\n        color = \"grey50\",\n        margin = ggplot2::margin(t = 0.2, b = 0.3, unit = \"cm\"),\n        size = 11\n      ),\n      plot.caption = element_text(\n        color = \"grey50\",\n        size = 8,\n        hjust = c(0)\n      ),\n      plot.caption.position = \"panel\",\n      axis.title.x = element_text(\n        angle = 0,\n        color = \"grey50\",\n        hjust = 1\n      ),\n      axis.text.x = element_text(\n        size = 9,\n        color = \"grey50\"\n      ),\n      axis.title.y = element_text(\n        angle = 0,\n        color = \"grey50\",\n        hjust = 1),\n      axis.text.y = element_text(\n        size = 9,\n        color = \"grey50\"\n      ),\n      panel.grid.minor.x = element_blank(),\n      panel.grid.major.x = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      panel.spacing = unit(0.25, \"cm\"),\n      panel.spacing.y = unit(0.25, \"cm\"),\n      strip.text = element_text(\n        angle = 0,\n        size = 9,\n        vjust = 1,\n        face = \"bold\"\n      ),\n      legend.title = element_text(\n        color = \"grey30\",\n        face = \"bold\",\n        vjust = 1,\n        size = 9\n      ),\n      legend.text = element_text(\n        size = 9,\n        color = \"grey30\"\n      ),\n      legend.justification = \"left\",\n      legend.box = \"horizontal\", # arrangement of multiple legends\n      legend.direction = \"vertical\",\n      legend.margin = ggplot2::margin(l = 0, t = 0, unit = \"cm\"),\n      legend.spacing.y = unit(0.07, units = \"cm\"),\n      legend.text.align = 0,\n      legend.box.just = \"top\",\n      legend.key.height = unit(0.2, \"line\"),\n      legend.key.width = unit(0.5, \"line\"),\n      text = element_text(size = 5)\n    )\n}\n\n```\n\n\n*Plot version 1*\n\n![](how-often-do-austrias-chancellors-use-the-word-i_files/images/pl_search_term_total.png)\n\n*Plot version 2*\n\n![](preview%20-%20Copy.png)\n\n# Context\n\nThis is another blog post which has populated my draft folder for much too long, and eventually got overtaken by reality. However, in light of the resignation of Austria's Chancellor Sebastian Kurz, I felt compelled to finalize it.\n\nThe former chancellor is, so it is said, a man of many talents. Among them, and one in which he undoubtedly excels, is the ability to present himself in the most favorable light, catch the limelight, and take credit for positive developments (whether the latter are indeed always of his own making is another story). Within this context, former Neos boss Matthias Strolz posted a few months ago with tongue in cheek a tweet announcing that he had successfully enforced on a Friday that the weekend will start on the next day. Hashtag I, I, I (*\"Ich, Ich, Ich\"*).\n\n```{r,  echo=F, code_folding=NULL, cache=T}\ninclude_tweet(\"https://twitter.com/matstrolz/status/1383118975807188998\")\n\n```\n\nThis jokingly phrased tweet with its hashtag made me wonder whether there is actually any empirical evidence for Kurz using the word \"I\" (*ich*) more often than others. Around the same time as Strolz' tweet, I (!) coincidentally stumbled across a relatively new dataset by Christian Rau and Jan Schwalbach [@Rauh.2020]. The very impressive *ParlSpeech V2* dataset comprises the transcripts of parliamentary speeches of nine states, including Austria. In short, a wonderful source to check for Kurz's use of the word 'I' and contrast it with that of his peers, i.e. previous chancellors.[^1]\n\n[^1]: Obviously, a chancellor's speeches in Parliament are only one part of his/her overall corpus of statements. It could be that answers in Parliament are formulated differently than those outside when it comes to the use of the word 'I'.\n\nUnfortunately though, there's a catch. For Austria, the ParlSpeech dataset only covers statements made between 15 Jan 1996 and 13 Dec 2018. Consequently, it excludes chancellors prior to Franz Vranitzky, and also only covers a part of the latter's time in office. Furthermore, and more problematic, the dataset also does not cover the later part of Kurz's first government (18 Dec 2017 - 28 May 2019) and Kurz's latest (last?) government (7 Jan 2020 - 11 October 2021).\n\nIn order to overcome the latter shortcoming, I digged into the transcripts as provided on the website of Austria's parliament and extracted all statements given in Parliament, including those of Kurz. While one may rightfully wonder whether the frequency of the word \"I\" has actually any instrumental, epistemological value, let alone taking it as an indicator for a personality feature, the work to extract all statements was too arduous to simply leave it unused. The instructions on how to extract the statements from Parliament's transcripts I detailed in this previous [post](https://werk.statt.codes//post/2021-04-20-extracting-speeches-held-at-austrias-parliament/){target=\"_blank\"}.\n\n```{r}\n#| code-fold: show\n#| cache: true\n#| warning: false\n\ndate_cut_off_max <- \"2018-12-13\"\ndate_cut_off_min <- \"1996-01-31\"\n\n\ndf_chancellors <- readr::read_delim(file=\"https://raw.githubusercontent.com/werkstattcodes/AT_gov_members/master/data/df_gov.csv\",\n                            delim = \",\") %>%\n  select(-ministry) %>% \n  filter(str_detect(position, regex(\"^Bundeskanzler(in)?$\"))) %>% \n  rename(office_start=date_start,\n         office_end=date_end) %>% \n # mutate(across(contains(\"office\"), .fns = function(x) lubridate::year(x))) %>% \n  mutate(dataset=case_when\n         (date_cut_off_min < office_start & date_cut_off_max > office_end ~ \"ParlSpeech\",\n           date_cut_off_min>office_start & date_cut_off_min < office_end ~ \"ParlSpeech partly\",\n           date_cut_off_max >office_start & date_cut_off_max < office_end ~ \"ParlSpeech partly & own data\",\n           date_cut_off_max < office_start ~ \"own data\",\n           \n           TRUE ~ as.character(\"not included\"))\n         ) %>%\n  mutate(scope=case_when(\n    office_start < as.Date(\"2020-01-08\") & office_start >= as.Date(\"1996-03-12\") ~ \"included\",\n    TRUE ~ as.character(\"not included\"))) %>% \n  #to show only from Vranitzky onwards\n  filter(office_start>as.Date(\"1990-12-16\")) \n\ndf_chancellors %>% \n  select(gov, office_start, office_end, dataset, scope) %>% \n  gt::gt()  %>%\n  cols_label(\n    scope=\"scope of analysis\"\n  ) %>% \n  tab_style(\n        style = list(\n          # cell_fill(color = \"red\"),\n          cell_text(color = \"darkgreen\")\n          ),\n        locations = cells_body(\n      columns = scope,\n      rows = scope == \"included\")\n    ) %>% \n    tab_style(\n        style = list(\n          # cell_fill(color = \"red\"),\n          cell_text(color = \"orange\")\n          ),\n        locations = cells_body(\n      columns = dataset,\n      rows = str_detect(dataset, regex(\"own data\")))\n    ) %>% \n    sub_missing(\n    columns = office_end,\n    missing_text = \"ongoing\") %>%\n  gt_theme_nytimes(., \n    ) %>%\n  tab_options(\n    data_row.padding = px(0),\n    table.font.size=px(14)) %>% \n  tab_header(title = \"Speeches by chancellors covered by the ParlSpeech dataset and own data\") %>%\n  as_raw_html()\n```\n\nTo eventually obtain a consolidated dataset which also includes Kurz's statements up to his last day in office and be able to check for the presence of the word \"I\" the following steps were required:\n\n1.  Get data\n\n    1.  Load data from [@Rauh.2020] and keep only statements by chancellors\n    2.  Extract text from transcripts for missing periods and keep only statements by chancellors (Kurz, Bierlein)\n    3.  Combine both datasets and avoid overlaps/duplications\n    4.  Complement data with additional details for further analysis (number of words, time in office)\n\n2.  Analysis\n\n    1.  Get frequency of word \"I\"\n    2.  Control for total number of words spoken and/or time in office (relative frequency).\n    3.  Compare and plot\n\nBelow the pertaining code with some comments added inline.\n\n# Getting the data\n\n## Import ParlSpeech datset\n\n```{r}\n#| include: false\n#| echo: false\n#| warning: false\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(here)\nlibrary(rvest)\nlibrary(hrbrthemes)  \nlibrary(xml2)\n```\n\nFirst, let's get the data contained in the ParlSpeech V2 dataset, which is on Harvard's dataverse [here](https://dataverse.harvard.edu/dataset.xhtml;jsessionid=9527732cd95a51862be5fc135568?persistentId=doi%3A10.7910%2FDVN%2FL4OAKN&version=&q=&fileAccess=&fileTag=&fileSortField=size&fileSortOrder=){target=\"_blank\"}. As you'll see, there is a file for each of the nine parliaments. *Corp_Nationalrat_V2.rds* is the file on Austria we are looking for. The code chunk below makes use of the `dataverse` package which enables you to directly import files from Harvard's dataverse.\n\n```{r, include=F, eval=T}\n#import file from ParlSpeech, and select relevant columns;\n# df_parlspeech <- readr::read_rds(file=here::here(\"posts\", \"2021_4_chancellor_word_i\", \"Corp_Nationalrat_V2.rds\")) %>% \n#   select(date, speaker, text) %>% \n#   mutate(date=lubridate::ymd(date)) %>% \n#   mutate(text=str_trim(text, side=\"both\"))\n\n#pre-filtered so that I do not have to re-import large parlspeech dataset\n#evertime I knit/run the document; takes a lot of ram\ndf_parlspeech_chancellor <- readr::read_csv(file=here::here(\"posts\",\"2021-04-22-how-often-do-austrias-chancellors-use-the-word-i\",\"how-often-do-austrias-chancellors-use-the-word-i_files\", \"df_parlspeech_chancellor.csv\")) %>% \n  filter(str_detect(speaker, regex(\"^Bundeskanzler(in)?\"))) %>%\n  mutate(name_family=str_extract(speaker, regex(\"\\\\w+$\")))\n```\n\n```{r}\n#| eval: false\n\nlibrary(dataverse)\nSys.setenv(\"DATAVERSE_SERVER\" = \"dataverse.harvard.edu\")\n\nli_parlspeech <- get_dataset(\"https://doi.org/10.7910/DVN/L4OAKN\")\ndf_parlspeech <- get_dataframe_by_id(fileid = 3758792,\n                                        .f=readr::read_rds) %>% \n  select(date, speaker, text) %>% \n  mutate(date=lubridate::ymd(date)) %>% \n  mutate(text=str_trim(text, side=\"both\"))\n```\n\nLet's only keep the statements by chancellors, and extract their family name.\n\n```{r, code_folding=NULL, echo=T, eval=F}\ndf_parlspeech_chancellor <- df_parlspeech %>% \n  filter(str_detect(speaker, regex(\"^Bundeskanzler(in)?\\\\b\"))) %>% \n  mutate(name_family=str_extract(speaker, regex(\"\\\\w+$\")))\n\n```\n\nHere the first (truncated) statement of every chancellor contained in the ParlSpeech dataset.\n\n```{r}\n#| include: false\n\ndf_parlspeech_chancellor %>% \n  group_by(name_family) %>% \n  arrange(date, .by_group = T) %>% \n  slice_head(., n=1) %>% \n  mutate(text=str_trunc(text, \n                        width=200,\n                        side=\"right\")) %>% \n  ungroup() %>% \n  relocate(., name_family, .after=date) %>% \n  select(-speaker) %>% \n  arrange(desc(date)) %>% \n  reactable(.,\n            defaultColDef = colDef(\n              width=100),\n            columns = list(\n              text=colDef(\n                width=500\n              )\n            ),\n            theme=nytimes())\n```\n\nBefore combining the data obtained from the ParlSpeech dataset, we've to make sure that there is no overlap in terms of time covered by the two datasets (what would result in duplicates). With a view to ensure this, I'll take the latest date in the ParlSpeech dataset as a cut-off date. Any observation contained in the data retrieved by me which precedes this cut-off date will be excluded.\n\n```{r, code_folding=NULL, echo=T}\ndate_cut_off_max <- max(df_parlspeech_chancellor$date)\ndate_cut_off_max\n```\n\nFurthermore, let's check the starting date of the ParlSpeech data.\n\n```{r, code_folding=NULL, echo=T}\ndate_cut_off_min <- min(df_parlspeech_chancellor$date)\ndate_cut_off_min\n```\n\nA look at chancellors' time in office reveals that the starting date of covered statements is at the end of Vranitzky's fourth term. Consequently, I only keep his fifth term, for which data on all statements is available. The data on chancellors' time in office is retrieved from a [repository](https://github.com/werkstattcodes/AT_gov_members){target=\"_blank\"} which I had previously created, and based on data published on the parliament's website.\n\n```{r, echo=T, code_folding=NULL}\n#keep data only for Vranitzky's 5th term\ndf_parlspeech_chancellor <- df_parlspeech_chancellor %>% \n  filter(date >= as.Date(\"1996-03-12\"))\n\n```\n\n## Add data extracted from transcripts\n\nNow let's add those statements which were given after the end of ParlSpeech's coverage (`r date_cut_off_max`). These statements were previously extracted [here](https://werk.statt.codes/post/2021-04-20-extracting-speeches-held-at-austrias-parliament/){target=\"_blank\"} and are available for download [here](https://data.world/zoowalk/parlspeeches){target=\"_blank\"}.\n\n```{r, code_folding=\"Get data extracted transcripts\", echo=F, eval=T, include=F}\n# add data extracted from site (legis XXVI, XXVII) ------------------------\n#can be removed since importing from data.world\n\ndf_XXVI_XXVII <- readr::read_csv2(file=here::here(\"posts\", \"2021-04-22-how-often-do-austrias-chancellors-use-the-word-i\", \"df_data.csv\")) #%>% \n  # select(date=date_first, speaker, text=statement, office_position)\n```\n\nTo directly import the dataset from data.world, where I stored it, I'll use `data.world` package.\n\n```{r}\n#| cache: true\n#| eval: false\n#| echo: false\n#| warning: false\n\nlibrary(data.world)\ndwapi::configure(auth_token=Sys.getenv(\"data_world_api\"))\ndf_XXVI_XXVII <- data.world::query(\n  qry_sql(\"SELECT * FROM df_data\"),\n  dataset = \"https://data.world/zoowalk/parlspeeches\") \n\n```\n\n## Combine\n\nKeep only statements by chancellors made after the end of ParlSpeech's coverage.\n\n```{r, code_folding=NULL, echo=T}\ndf_additions <- df_XXVI_XXVII %>% \n  select(date=date_first, speaker, text=statement, office_position) %>%\n  #remove statements preceding ParlSpeech's end date\n  filter(date > date_cut_off_max) %>% \n  #keep only statements by chancellors\n  filter(str_detect(office_position, regex(\"Bundeskanzler(in)?\\\\b\")))\n\n```\n\nCombine both datasets.\n\n```{r, code_folding=NULL, echo=T}\ndf_all <- bind_rows(df_parlspeech_chancellor, df_additions) %>% \n  as_tibble() %>% \n  mutate(speaker_name_family=str_extract(speaker, regex(\"\\\\S*$\"))) %>% \n  mutate(text_length=str_count(text, regex(\"\\\\w+\"))) #\n```\n\nAdd details on chancellors' terms to the data:\n\n```{r}\n#| echo: false\n#| warning: false\n\n#filter out only chancellors\ndf_chancellors_speeches <- df_chancellors %>% \n  filter(scope==\"included\") %>% \n  mutate(chancellor_name_family=str_extract(name_clean, regex(\"\\\\w+$\"))) %>% \n  ungroup() %>% \n  left_join(., df_all,\n            by=c(\"chancellor_name_family\"=\"speaker_name_family\")) %>% \n  #only those observations where speech date is within office period; \n  #removes duplicates created by left_join; e.g. Kurz, Schüssel, Feaymann have two terms;\n  filter(date >= office_start) %>% \n  filter(date <= office_end) %>% \n  select(-scope, -contains(\"position\"), -name_family) %>% \n  mutate(office_duration=difftime(office_end, office_start, units=c(\"days\")) %>% \n           as.numeric()) %>%\n  distinct()\n```\n\nAdd details on party affiliation:\n\n```{r, code_folding=NULL, echo=T}\nvec_color <- c(\"SPÖ\"=\"red\", \"ÖVP\"=\"black\", \"Neue ÖVP\"=\"#62C3D0\", \"unabhängig\"=\"grey30\")  \n\ndf_party<- tibble::tribble(\n          ~name, ~party,\n          \"Vranitzky\", \"SPÖ\",\n        \"Klima\",  \"SPÖ\",\n         \"Kurz\", \"Neue ÖVP\",\n     \"Schüssel\",  \"ÖVP\",\n     \"Bierlein\", \"unabhängig\",\n  \"Gusenbauer\",  \"SPÖ\",\n      \"Faymann\",  \"SPÖ\",\n         \"Kern\",  \"SPÖ\"\n  ) \n\ndf_chancellors_speeches <- df_chancellors_speeches %>% \n  left_join(.,\n            df_party,\n            by=c(\"chancellor_name_family\"=\"name\"))\n\n```\n\n# Results\n\n## Some exploratory snapshots:\n\n### Number of days with at least one statement by a chancellor\n\n```{r}\nlibrary(paletteer)\ndf_statement_days <- df_chancellors_speeches %>% \n  group_by(gov, office_duration) %>% \n  summarise(n_days=length(unique(date))) %>% \n  arrange(desc(n_days)) %>% \n  ungroup() %>% \n  mutate(n_days_rel=office_duration/n_days) %>% \n  arrange(n_days_rel)\n\ndf_statement_days %>%\n  mutate(chancellor_name=str_extract(gov, regex(\"^\\\\w+\"))) %>% \n  ggplot()+\n  labs(title=\"An wievielen Tagen sprach Kanzler/in im Parlament\",\n       # subtitle=\"An wievielen Tagen gab der Kanzler/die Kanzlerin ein Statement im Parlament?\",\n       caption=glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}. Keine vollständigen Daten für Zeit vor Vranitzky 5.\\nAnalyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"),\n       # x=\"Gesamtlänge aller Statements in Anzahl an Wörtern\")+\n       x=\"Tage im Amt\",\n       y=\"Tage mit Statements\")+\n  geom_point(aes(\n    x=office_duration,\n    colour=chancellor_name,\n    y=n_days\n  ))+\n  geom_text_repel(aes(\n    x=office_duration,\n    y=n_days,\n    label=gov,\n    group=chancellor_name,\n    colour=chancellor_name))+\n  scale_y_continuous(label=scales::label_comma())+\n  scale_x_continuous(label=scales::label_comma())+\n  scale_color_paletteer_d(\"ggsci::dark_uchicago\")+\n  theme_post()+\n  theme(\n    legend.position = \"none\",\n    plot.caption.position = \"plot\",\n    axis.title.y = element_text(angle=90,\n                                vjust=1,\n                                hjust=.9))\n\n\n```\n\n### Total number of words spoken by a chancellor\n\n```{r}\ndf_statement_length <- df_chancellors_speeches %>% \n  group_by(gov, office_duration) %>% \n  summarise(text_length_total=sum(text_length, na.rm=T)) %>% \n  ungroup() %>% \n  mutate(text_length_day=text_length_total/office_duration)\n```\n\n```{r}\ndf_statement_length %>%\n  mutate(chancellor_name=str_extract(gov, regex(\"^\\\\w+\"))) %>% \n  ggplot()+\n  labs(title=\"Wie lange haben Kanzler/in vor dem Parlament gesprochen?\",\n       subtitle=\"Anzahl der insg. gesprochenen Worte im Parlament. Daten ab Vranitzky 5 (März 1996).\",\n       caption=glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}.\\nAnalyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"),\n       # x=\"Gesamtlänge aller Statements in Anzahl an Wörtern\")+\n       x=\"Tage im Amt\",\n       y=\"Anzahl aller gesprochenen Worte\")+\n  geom_point(aes(\n    x=office_duration,\n    y=text_length_total\n  ))+\n  geom_text_repel(aes(\n    x=office_duration,\n    y=text_length_total,\n    label=gov,\n    group=chancellor_name,\n    colour=chancellor_name))+\n  scale_color_paletteer_d(\"ggsci::dark_uchicago\")+\n  scale_y_continuous(label=scales::label_comma())+\n  scale_x_continuous(label=scales::label_comma())+\n  # paletteer::scale_color_paletteer_d(palette = \"dutchmasters::anatomy\")+\n  theme_post()+\n  theme(\n    legend.position = \"none\",\n    plot.caption.position = \"plot\",\n    axis.title.y = element_text(angle=90,\n                                vjust=1,\n                                hjust=1)\n  )\n```\n\n```{r}\ndf_statement_length %>% \n  arrange(desc(text_length_day)) %>% \n  reactable(.,\n            columns=list(\n              office_duration=colDef(\n                name=\"Tage im Amt\"\n              ),\n              text_length_total=colDef(\n                name=\"Summe an insgesamt gesprochener Worte\",\n                format=colFormat(separators = T)\n              ),\n              text_length_day=colDef(\n                name=\"Worte pro Tag\",\n                format=colFormat(digits = 2),\n                style=color_scales(., \n                                   colors=c(\"grey\", \"blue\"))\n              )),\n            defaultPageSize =11,\n            theme=nytimes()) %>% \n  add_title(\"Anzahl der gesprochenen Worte im Parlament pro Tag im Amt\",\n            font_size=18) %>% \n  add_subtitle(\"Daten ab Vranitzky 5 (März 1996).\",\n               font_size=12,\n               font_weight=\"normal\") %>% \n  add_source(glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}. Daten zu Vranitzky beziehen sich nur auf seine 5. Amtsperiode (1996-03-12 bis 1997-01-18).\n                        Analyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"),\n             font_size=11,\n             font_weight = \"normal\",\n             font_color = \"#999999\",\n             # font_family = \"Helvetica\",\n             align=\"left\")\n```\n\nA few things stood out for me here: First, Chancellor Schüssel, who is occasionally remembered as the \"Chancellor of Silence\" (\"Schweigekanzler\") was actually quite talkative. In absolute numbers, no other chancellor in the dataset spoke more than Schüssel during his second term. And also his relative numbers are among the top figures. Admittedly, his nickname did not refer to the length of his statements, but rather - if I remember correctly - the (alleged) absence of statements when it came to controversial issues, i.e. statements by his extreme-right coalition partner.\n\nSecond, and more related to my point of departure, chancellor Kurz features very low numbers. With the exception of the special case of chancellor Bierlein (caretaker/expert government) no other chancellor had fewer words spoken in parliament, if take the duration of his office into account.\n\n## Use of term \"I\"\n\nNow let's focus on the chancellors' usage of the word 'I' (*'ich'*). Below the code and comments.\n\n```{r}\n#| echo: false\n#| warning: false\n\n\nsearch_term=\"\\\\bich\\\\b\"\n\ndf_chancellors_speeches <- df_chancellors_speeches %>% \n  mutate(search_term_n=str_count(text, regex(search_term, ignore_case = T))) \n\n#search term in total per chancellor\ndf_search_term_n<- df_chancellors_speeches %>% \n  group_by(chancellor_name_family, party) %>% \n  summarise(search_term_sum=sum(search_term_n),\n            text_length_total=sum(text_length)) %>% \n  ungroup() %>% \n  mutate(search_term_rel=search_term_sum/text_length_total) %>% \n  mutate(search_term_rel_inv=1/search_term_rel)  %>% \n  arrange(desc(search_term_rel))\n\n```\n\nFor the sake of clarity, but mainly due to an inability to make up my mind, two plots which depict the same data. Again, with the exception of the special case of Bierlein, no other chancellor used the word 'I' more often than Kurz (however, the difference to Klima seems not considerable).\n\n### Plot version 1\n\n```{r}\n#| echo: false\n#| warning: false\n\npl_df_search_term_total <- df_search_term_n %>% \n  mutate(chancellor_name=fct_reorder(chancellor_name_family, search_term_rel_inv)) \n\nhrbrthemes::update_geom_font_defaults(family=\"Roboto Condensed\")\n\nlibrary(ggtext)\n\npl_search_term_total <- pl_df_search_term_total %>% \n  ggplot()+\n labs(title=\"Bundeskanzler/in und das Wort <span style='font-family:Caveat;color:black;font-size:30pt;'>'Ich'</span>\",\n     #  x=c(\"<< häufiger\",  \"seltener >>\"),\n       subtitle=\"Wie oft verwendete der Kanzler/die Kanzlerin durchschnittlich das Wort 'ich' in Statements vor dem Parlament?\",\n       caption=glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}. Daten zu Vranitzky beziehen sich nur auf seine 5. Amtsperiode (1996-03-12 bis 1997-01-18).\\nAnalyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"))+\n  geom_segment(x=51, xend=109,\n               y=0, yend=0,\n               color=\"black\",\n               linewidth=0.5,\n               linejoin = \"mitre\",\n               arrow=arrow(length=unit(0.3, \"cm\"),\n                           ends=\"both\"))+\n  geom_label(x=53, #52\n            y=0,  #0\n            label=\"häufiger\",\n            size=3,\n            color=\"black\",\n            fill=\"white\",\n            fontface=\"plain\",\n            label.size=0,\n            hjust=0,\n            check_overlap = T)+\n    geom_label(x=107,\n            y=0,\n            label=\"seltener\",\n            label.size=0,\n            size=3,\n            family=\"Roboto Condensed\",\n            fontface=\"plain\",\n            color=\"black\",\n            fill=\"white\",\n            hjust=1,\n            check_overlap = T\n            )+\n  ggrepel::geom_text_repel(\n    data=. %>% \n      arrange(search_term_rel_inv) %>% \n      filter(row_number()%%2==1),\n    aes(\n    y=0,\n    x=search_term_rel_inv,\n    color=party,\n    label=paste0(str_extract(chancellor_name, regex(\"\\\\w+$\")), \" (\",\n                round(search_term_rel_inv, digits = 1),\")\")),\n    # nudge_y = 0.5,\n    hjust=0,\n    size=3,\n    nudge_y = -.1,\n    family=\"Roboto Condensed\",\n    angle=0,\n    segment.color=\"grey70\",\n    show.legend = F)+\n  ggrepel::geom_text_repel(\n    data=. %>% \n      arrange(search_term_rel_inv) %>% \n      filter(row_number()%%2==0),\n    aes(\n    y=0,\n    x=search_term_rel_inv,\n    color=party,\n    label=paste0(str_extract(chancellor_name, regex(\"\\\\w+$\")), \" (\",\n                round(search_term_rel_inv, digits = 0),\")\")),\n    force_pull = 0,\n    nudge_y = .1,\n    family=\"Roboto Condensed\",\n    hjust=0,\n    size=3,\n    angle=0,\n    segment.color=\"grey70\",\n    show.legend = F\n    )+\n  geom_point(aes(\n    y=0,\n    x=search_term_rel_inv,\n    color=party,\n    fill=party),\n    stat=\"identity\")+\n  scale_color_manual(values=vec_color)+\n  # scale_fill_viridis_d(option=\"D\")+\n  scale_x_continuous(limits=c(50, 110),\n                     breaks=seq(60, 100, 20),\n                     expand=expansion(mult=c(0.00,0.01)),\n                     labels=function(x) glue::glue(\"jedes {x}. Wort\"),\n                     position = \"top\")+\n  scale_y_continuous(limits=c(-.4,.4),\n                     expand=expansion(mult=0))+\n  # hrbrthemes::theme_ipsum_rc()+\n  theme_post()+\n  coord_cartesian(ylim=c(-.2,.2))+\n  guides(color=guide_legend(title=NULL,\n                            label.theme = element_text(size=8,\n                                                       margin=ggplot2::margin(l=0, unit=\"cm\"),\n                                                       family=\"Roboto Condensed\",\n                                                       color=\"grey50\")),\n         fill=guide_none())+\n  theme(legend.position=\"top\",\n        legend.direction = \"horizontal\",\n        legend.text.align = 0,\n        legend.justification = \"left\",\n        legend.margin = ggplot2::margin(l=0, t=0, unit=\"cm\"),\n        legend.box.margin = ggplot2::margin(l=-0.3, t=0.25, unit = \"cm\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_line(),\n        # panel.grid.minor.x = element_blank(),\n        plot.title = element_markdown(),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(size=rel(2),\n                                     family=\"Roboto Condensed\",\n                                     margin=ggplot2::margin(b=0, unit=\"cm\")),\n        plot.caption = element_text(face=\"plain\",\n                                    family=\"Roboto Condensed\",\n                                    hjust=0),\n        axis.ticks.length.x.bottom = unit(.3, units=\"cm\"),\n        axis.text.x=element_text(size=8,\n                                 margin=ggplot2::margin(t=0, b=0, unit=\"cm\")),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank())\n\n```\n\n```{r}\n#| echo: false\n#| fig-height: 3\n#| column: body-outset-right\n\n\npl_search_term_total\n```\n\n```{r, dev='ragg_png', eval=F, include=F}\nggsave(filename=here::here(\"_post\", \n                           \"2021-04-22-how-often-do-austrias-chancellors-use-the-word-i\", \n                           \"how-often-do-austrias-chancellors-use-the-word-i_files\",\n                           \"images\", \n                           \"pl_search_term_total.png\"),\n       plot=pl_search_term_total,\n       width = 16,\n       height = 8,\n       units=\"cm\")\n```\n\n### Plot version 2\n\n```{r}\n#| echo: false\n#| warning: false\n#| message: false\n\nlibrary(ggtext)\n#vec_color %>% enframe(., name=\"party\", value=\"party_color\")\n\ndf_pl_search_term_total_2<- pl_df_search_term_total %>% \n  left_join(., vec_color %>% enframe(., name=\"party\", value=\"party_color\")) %>% \n  mutate(chancellor_name_md=glue::glue(\"<span style='color:{party_color}'>{chancellor_name}</span>\")) %>%\n  mutate(chancellor_name_md=fct_reorder(chancellor_name_md, search_term_rel_inv) %>% \n           fct_rev()) \n  # select(chancellor_name_md)\n  \n```\n\n```{r}\n#| include: false\n\npl_search_term_total_2  <- df_pl_search_term_total_2%>%  \n  ggplot()+\n  labs(title=\"Bundeskanzler/in und das Wort <span style='font-family:Caveat;color:black;font-size:30pt;'>'Ich'</span>\",\n     #  x=c(\"<< häufiger\",  \"seltener >>\"),\n       subtitle=\"Wie oft verwendete der Kanzler/die Kanzlerin durchschnittlich das Wort 'ich' in Statements vor dem Parlament?\",\n       caption=glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}. Daten zu Vranitzky beziehen sich nur auf seine 5. Amtsperiode (1996-03-12 bis 1997-01-18).\\nAnalyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"))+\n  geom_segment(aes(\n    y=chancellor_name_md,\n    yend=chancellor_name_md,\n    x=0,\n    xend=search_term_rel_inv,\n    group=chancellor_name_md,\n    color=party\n    ),\n        linewidth=3,\n        # color=\"grey80\"\n  )+\n  geom_text(data=. %>% filter(!str_detect(chancellor_name, \"Kurz\")),\n              aes(\n    y=chancellor_name_md,\n    x=search_term_rel_inv,\n    #color=search_term_rel_inv,\n    label=round(search_term_rel_inv, 0)),\n    nudge_x = 1,\n    size=3.5,\n    hjust=0,\n    face=\"bold\"\n    )+\n  geom_text(data=. %>% filter(str_detect(chancellor_name, \"Kurz\")),\n              aes(\n    y=chancellor_name_md,\n    x=search_term_rel_inv,\n    label=glue::glue(\"im Durchschnitt jedes {round(search_term_rel_inv, 0)}. Wort\")),\n    nudge_x = 1,\n    size=3.5,\n    hjust=0,\n    face=\"bold\"\n    )+\n  #scale_y_discrete(label=function(x) stringr::str_extract(x, regex(\"\\\\S+$\")))+\n  scale_x_continuous(expand=expansion(mult=c(0, 0.05)),\n                     breaks = seq(0, 100, 25),\n                     labels=c(\"                                   häufiger <<\", seq(25,75,25) %>% paste0(., \".\"),\">> seltener                                   \"),\n                     position = \"top\",\n                     sec.axis = dup_axis()\n                     )+\n  scale_color_manual(values=vec_color)+\n  hrbrthemes::theme_ipsum_rc()+\n  theme(panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        plot.title = element_markdown(margin=ggplot2::margin(b=0),\n                                      size=13),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(size=rel(.9),\n                                     margin = ggplot2::margin(\n                                       t=0,\n                                       b=0.3, unit=\"cm\"),\n                                     color=\"grey10\"),\n        plot.caption = element_text(color=\"grey30\",\n                                    margin=ggplot2::margin(t=0, unit=\"cm\"),\n                                    size=8,\n                                    hjust=0),\n        plot.caption.position = \"plot\",\n        axis.text.x.top = element_text(size=9,\n                                       color=\"grey30\",\n                                       margin=ggplot2::margin(b=0,\n                                                       t=0, \n                                                       unit=\"cm\")),\n        axis.text.x.bottom = element_blank(),\n        axis.title.x.top = element_blank(),\n        axis.title.x.bottom = element_blank(),\n        axis.title.y=element_blank(),\n        axis.text.y = element_markdown(size=10, face=\"bold\"),\n        legend.position=\"top\",\n        legend.margin = ggplot2::margin(0, unit=\"cm\"),\n        legend.title=element_blank(),\n        legend.justification=c(-.25, 0))+\n       guides(color=guide_legend(keywidth = 0.4))\n```\n\n```{r}\n#| fig-height: 4\n#| column: body-outset-right\n#| echo: false\n#| fig-align: left\n\npl_search_term_total_2\n```\n\n```{r}\n#| include: false\n#| eval: true\nggsave(filename=here::here(\"posts\", \n                           \"2021-04-22-how-often-do-austrias-chancellors-use-the-word-i\",\n                           \"preview_thumbnail_2.svg\"),\n      plot=pl_search_term_total_2,\n      # width = 150,\n      # height = 200,\n       units=c(\"px\"))\n```\n\n# Wrap-up\n\nSo that's it. If the above results are not profoundly meaningful (or maybe they are?), I found them at least somewhat entertaining. As always, if you spot any error, have a question etc. feel free to contact me, best via [twitter](https://twitter.com/zoowalk){target=\"_blank\"} direct message.\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nlibrary(tweetrmd)\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(ragg)\nlibrary(colorspace)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(reactable)\nlibrary(reactablefmtr)\n\nknitr::opts_chunk$set(echo = FALSE,\n                      knitr::opts_chunk$set(dev = \"ragg_png\"))\n\nplot_bg_color <- \"white\"\n\n\ntheme_post <- function() {\n  hrbrthemes::theme_ipsum_rc() +\n    theme(\n      plot.background = element_rect(fill = plot_bg_color, color=NA),\n      panel.background = element_rect(fill = plot_bg_color, color=NA),\n      plot.margin = ggplot2::margin(l = 0, \n                           t = 0.25,\n                           unit = \"cm\"),\n      plot.title = element_text(\n        color = \"grey20\",\n        face = \"bold\",\n        margin = ggplot2::margin(l = 0, unit = \"cm\"),\n        size = 13\n      ),\n      plot.title.position = \"plot\",\n      plot.subtitle = element_text(\n        color = \"grey50\",\n        margin = ggplot2::margin(t = 0.2, b = 0.3, unit = \"cm\"),\n        size = 11\n      ),\n      plot.caption = element_text(\n        color = \"grey50\",\n        size = 8,\n        hjust = c(0)\n      ),\n      plot.caption.position = \"panel\",\n      axis.title.x = element_text(\n        angle = 0,\n        color = \"grey50\",\n        hjust = 1\n      ),\n      axis.text.x = element_text(\n        size = 9,\n        color = \"grey50\"\n      ),\n      axis.title.y = element_text(\n        angle = 0,\n        color = \"grey50\",\n        hjust = 1),\n      axis.text.y = element_text(\n        size = 9,\n        color = \"grey50\"\n      ),\n      panel.grid.minor.x = element_blank(),\n      panel.grid.major.x = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      panel.spacing = unit(0.25, \"cm\"),\n      panel.spacing.y = unit(0.25, \"cm\"),\n      strip.text = element_text(\n        angle = 0,\n        size = 9,\n        vjust = 1,\n        face = \"bold\"\n      ),\n      legend.title = element_text(\n        color = \"grey30\",\n        face = \"bold\",\n        vjust = 1,\n        size = 9\n      ),\n      legend.text = element_text(\n        size = 9,\n        color = \"grey30\"\n      ),\n      legend.justification = \"left\",\n      legend.box = \"horizontal\", # arrangement of multiple legends\n      legend.direction = \"vertical\",\n      legend.margin = ggplot2::margin(l = 0, t = 0, unit = \"cm\"),\n      legend.spacing.y = unit(0.07, units = \"cm\"),\n      legend.text.align = 0,\n      legend.box.just = \"top\",\n      legend.key.height = unit(0.2, \"line\"),\n      legend.key.width = unit(0.5, \"line\"),\n      text = element_text(size = 5)\n    )\n}\n\n```\n\n# Just the results, please!\n\n*Plot version 1*\n\n![](how-often-do-austrias-chancellors-use-the-word-i_files/images/pl_search_term_total.png)\n\n*Plot version 2*\n\n![](preview%20-%20Copy.png)\n\n# Context\n\nThis is another blog post which has populated my draft folder for much too long, and eventually got overtaken by reality. However, in light of the resignation of Austria's Chancellor Sebastian Kurz, I felt compelled to finalize it.\n\nThe former chancellor is, so it is said, a man of many talents. Among them, and one in which he undoubtedly excels, is the ability to present himself in the most favorable light, catch the limelight, and take credit for positive developments (whether the latter are indeed always of his own making is another story). Within this context, former Neos boss Matthias Strolz posted a few months ago with tongue in cheek a tweet announcing that he had successfully enforced on a Friday that the weekend will start on the next day. Hashtag I, I, I (*\"Ich, Ich, Ich\"*).\n\n```{r,  echo=F, code_folding=NULL, cache=T}\ninclude_tweet(\"https://twitter.com/matstrolz/status/1383118975807188998\")\n\n```\n\nThis jokingly phrased tweet with its hashtag made me wonder whether there is actually any empirical evidence for Kurz using the word \"I\" (*ich*) more often than others. Around the same time as Strolz' tweet, I (!) coincidentally stumbled across a relatively new dataset by Christian Rau and Jan Schwalbach [@Rauh.2020]. The very impressive *ParlSpeech V2* dataset comprises the transcripts of parliamentary speeches of nine states, including Austria. In short, a wonderful source to check for Kurz's use of the word 'I' and contrast it with that of his peers, i.e. previous chancellors.[^1]\n\n[^1]: Obviously, a chancellor's speeches in Parliament are only one part of his/her overall corpus of statements. It could be that answers in Parliament are formulated differently than those outside when it comes to the use of the word 'I'.\n\nUnfortunately though, there's a catch. For Austria, the ParlSpeech dataset only covers statements made between 15 Jan 1996 and 13 Dec 2018. Consequently, it excludes chancellors prior to Franz Vranitzky, and also only covers a part of the latter's time in office. Furthermore, and more problematic, the dataset also does not cover the later part of Kurz's first government (18 Dec 2017 - 28 May 2019) and Kurz's latest (last?) government (7 Jan 2020 - 11 October 2021).\n\nIn order to overcome the latter shortcoming, I digged into the transcripts as provided on the website of Austria's parliament and extracted all statements given in Parliament, including those of Kurz. While one may rightfully wonder whether the frequency of the word \"I\" has actually any instrumental, epistemological value, let alone taking it as an indicator for a personality feature, the work to extract all statements was too arduous to simply leave it unused. The instructions on how to extract the statements from Parliament's transcripts I detailed in this previous [post](https://werk.statt.codes//post/2021-04-20-extracting-speeches-held-at-austrias-parliament/){target=\"_blank\"}.\n\n```{r}\n#| code-fold: show\n#| cache: true\n#| warning: false\n\ndate_cut_off_max <- \"2018-12-13\"\ndate_cut_off_min <- \"1996-01-31\"\n\n\ndf_chancellors <- readr::read_delim(file=\"https://raw.githubusercontent.com/werkstattcodes/AT_gov_members/master/data/df_gov.csv\",\n                            delim = \",\") %>%\n  select(-ministry) %>% \n  filter(str_detect(position, regex(\"^Bundeskanzler(in)?$\"))) %>% \n  rename(office_start=date_start,\n         office_end=date_end) %>% \n # mutate(across(contains(\"office\"), .fns = function(x) lubridate::year(x))) %>% \n  mutate(dataset=case_when\n         (date_cut_off_min < office_start & date_cut_off_max > office_end ~ \"ParlSpeech\",\n           date_cut_off_min>office_start & date_cut_off_min < office_end ~ \"ParlSpeech partly\",\n           date_cut_off_max >office_start & date_cut_off_max < office_end ~ \"ParlSpeech partly & own data\",\n           date_cut_off_max < office_start ~ \"own data\",\n           \n           TRUE ~ as.character(\"not included\"))\n         ) %>%\n  mutate(scope=case_when(\n    office_start < as.Date(\"2020-01-08\") & office_start >= as.Date(\"1996-03-12\") ~ \"included\",\n    TRUE ~ as.character(\"not included\"))) %>% \n  #to show only from Vranitzky onwards\n  filter(office_start>as.Date(\"1990-12-16\")) \n\ndf_chancellors %>% \n  select(gov, office_start, office_end, dataset, scope) %>% \n  gt::gt()  %>%\n  cols_label(\n    scope=\"scope of analysis\"\n  ) %>% \n  tab_style(\n        style = list(\n          # cell_fill(color = \"red\"),\n          cell_text(color = \"darkgreen\")\n          ),\n        locations = cells_body(\n      columns = scope,\n      rows = scope == \"included\")\n    ) %>% \n    tab_style(\n        style = list(\n          # cell_fill(color = \"red\"),\n          cell_text(color = \"orange\")\n          ),\n        locations = cells_body(\n      columns = dataset,\n      rows = str_detect(dataset, regex(\"own data\")))\n    ) %>% \n    sub_missing(\n    columns = office_end,\n    missing_text = \"ongoing\") %>%\n  gt_theme_nytimes(., \n    ) %>%\n  tab_options(\n    data_row.padding = px(0),\n    table.font.size=px(14)) %>% \n  tab_header(title = \"Speeches by chancellors covered by the ParlSpeech dataset and own data\") %>%\n  as_raw_html()\n```\n\nTo eventually obtain a consolidated dataset which also includes Kurz's statements up to his last day in office and be able to check for the presence of the word \"I\" the following steps were required:\n\n1.  Get data\n\n    1.  Load data from [@Rauh.2020] and keep only statements by chancellors\n    2.  Extract text from transcripts for missing periods and keep only statements by chancellors (Kurz, Bierlein)\n    3.  Combine both datasets and avoid overlaps/duplications\n    4.  Complement data with additional details for further analysis (number of words, time in office)\n\n2.  Analysis\n\n    1.  Get frequency of word \"I\"\n    2.  Control for total number of words spoken and/or time in office (relative frequency).\n    3.  Compare and plot\n\nBelow the pertaining code with some comments added inline.\n\n# Getting the data\n\n## Import ParlSpeech datset\n\n```{r}\n#| include: false\n#| echo: false\n#| warning: false\nlibrary(tidyverse)\nlibrary(ggrepel)\nlibrary(here)\nlibrary(rvest)\nlibrary(hrbrthemes)  \nlibrary(xml2)\n```\n\nFirst, let's get the data contained in the ParlSpeech V2 dataset, which is on Harvard's dataverse [here](https://dataverse.harvard.edu/dataset.xhtml;jsessionid=9527732cd95a51862be5fc135568?persistentId=doi%3A10.7910%2FDVN%2FL4OAKN&version=&q=&fileAccess=&fileTag=&fileSortField=size&fileSortOrder=){target=\"_blank\"}. As you'll see, there is a file for each of the nine parliaments. *Corp_Nationalrat_V2.rds* is the file on Austria we are looking for. The code chunk below makes use of the `dataverse` package which enables you to directly import files from Harvard's dataverse.\n\n```{r, include=F, eval=T}\n#import file from ParlSpeech, and select relevant columns;\n# df_parlspeech <- readr::read_rds(file=here::here(\"posts\", \"2021_4_chancellor_word_i\", \"Corp_Nationalrat_V2.rds\")) %>% \n#   select(date, speaker, text) %>% \n#   mutate(date=lubridate::ymd(date)) %>% \n#   mutate(text=str_trim(text, side=\"both\"))\n\n#pre-filtered so that I do not have to re-import large parlspeech dataset\n#evertime I knit/run the document; takes a lot of ram\ndf_parlspeech_chancellor <- readr::read_csv(file=here::here(\"posts\",\"2021-04-22-how-often-do-austrias-chancellors-use-the-word-i\",\"how-often-do-austrias-chancellors-use-the-word-i_files\", \"df_parlspeech_chancellor.csv\")) %>% \n  filter(str_detect(speaker, regex(\"^Bundeskanzler(in)?\"))) %>%\n  mutate(name_family=str_extract(speaker, regex(\"\\\\w+$\")))\n```\n\n```{r}\n#| eval: false\n\nlibrary(dataverse)\nSys.setenv(\"DATAVERSE_SERVER\" = \"dataverse.harvard.edu\")\n\nli_parlspeech <- get_dataset(\"https://doi.org/10.7910/DVN/L4OAKN\")\ndf_parlspeech <- get_dataframe_by_id(fileid = 3758792,\n                                        .f=readr::read_rds) %>% \n  select(date, speaker, text) %>% \n  mutate(date=lubridate::ymd(date)) %>% \n  mutate(text=str_trim(text, side=\"both\"))\n```\n\nLet's only keep the statements by chancellors, and extract their family name.\n\n```{r, code_folding=NULL, echo=T, eval=F}\ndf_parlspeech_chancellor <- df_parlspeech %>% \n  filter(str_detect(speaker, regex(\"^Bundeskanzler(in)?\\\\b\"))) %>% \n  mutate(name_family=str_extract(speaker, regex(\"\\\\w+$\")))\n\n```\n\nHere the first (truncated) statement of every chancellor contained in the ParlSpeech dataset.\n\n```{r}\n#| include: false\n\ndf_parlspeech_chancellor %>% \n  group_by(name_family) %>% \n  arrange(date, .by_group = T) %>% \n  slice_head(., n=1) %>% \n  mutate(text=str_trunc(text, \n                        width=200,\n                        side=\"right\")) %>% \n  ungroup() %>% \n  relocate(., name_family, .after=date) %>% \n  select(-speaker) %>% \n  arrange(desc(date)) %>% \n  reactable(.,\n            defaultColDef = colDef(\n              width=100),\n            columns = list(\n              text=colDef(\n                width=500\n              )\n            ),\n            theme=nytimes())\n```\n\nBefore combining the data obtained from the ParlSpeech dataset, we've to make sure that there is no overlap in terms of time covered by the two datasets (what would result in duplicates). With a view to ensure this, I'll take the latest date in the ParlSpeech dataset as a cut-off date. Any observation contained in the data retrieved by me which precedes this cut-off date will be excluded.\n\n```{r, code_folding=NULL, echo=T}\ndate_cut_off_max <- max(df_parlspeech_chancellor$date)\ndate_cut_off_max\n```\n\nFurthermore, let's check the starting date of the ParlSpeech data.\n\n```{r, code_folding=NULL, echo=T}\ndate_cut_off_min <- min(df_parlspeech_chancellor$date)\ndate_cut_off_min\n```\n\nA look at chancellors' time in office reveals that the starting date of covered statements is at the end of Vranitzky's fourth term. Consequently, I only keep his fifth term, for which data on all statements is available. The data on chancellors' time in office is retrieved from a [repository](https://github.com/werkstattcodes/AT_gov_members){target=\"_blank\"} which I had previously created, and based on data published on the parliament's website.\n\n```{r, echo=T, code_folding=NULL}\n#keep data only for Vranitzky's 5th term\ndf_parlspeech_chancellor <- df_parlspeech_chancellor %>% \n  filter(date >= as.Date(\"1996-03-12\"))\n\n```\n\n## Add data extracted from transcripts\n\nNow let's add those statements which were given after the end of ParlSpeech's coverage (`r date_cut_off_max`). These statements were previously extracted [here](https://werk.statt.codes/post/2021-04-20-extracting-speeches-held-at-austrias-parliament/){target=\"_blank\"} and are available for download [here](https://data.world/zoowalk/parlspeeches){target=\"_blank\"}.\n\n```{r, code_folding=\"Get data extracted transcripts\", echo=F, eval=T, include=F}\n# add data extracted from site (legis XXVI, XXVII) ------------------------\n#can be removed since importing from data.world\n\ndf_XXVI_XXVII <- readr::read_csv2(file=here::here(\"posts\", \"2021-04-22-how-often-do-austrias-chancellors-use-the-word-i\", \"df_data.csv\")) #%>% \n  # select(date=date_first, speaker, text=statement, office_position)\n```\n\nTo directly import the dataset from data.world, where I stored it, I'll use `data.world` package.\n\n```{r}\n#| cache: true\n#| eval: false\n#| echo: false\n#| warning: false\n\nlibrary(data.world)\ndwapi::configure(auth_token=Sys.getenv(\"data_world_api\"))\ndf_XXVI_XXVII <- data.world::query(\n  qry_sql(\"SELECT * FROM df_data\"),\n  dataset = \"https://data.world/zoowalk/parlspeeches\") \n\n```\n\n## Combine\n\nKeep only statements by chancellors made after the end of ParlSpeech's coverage.\n\n```{r, code_folding=NULL, echo=T}\ndf_additions <- df_XXVI_XXVII %>% \n  select(date=date_first, speaker, text=statement, office_position) %>%\n  #remove statements preceding ParlSpeech's end date\n  filter(date > date_cut_off_max) %>% \n  #keep only statements by chancellors\n  filter(str_detect(office_position, regex(\"Bundeskanzler(in)?\\\\b\")))\n\n```\n\nCombine both datasets.\n\n```{r, code_folding=NULL, echo=T}\ndf_all <- bind_rows(df_parlspeech_chancellor, df_additions) %>% \n  as_tibble() %>% \n  mutate(speaker_name_family=str_extract(speaker, regex(\"\\\\S*$\"))) %>% \n  mutate(text_length=str_count(text, regex(\"\\\\w+\"))) #\n```\n\nAdd details on chancellors' terms to the data:\n\n```{r}\n#| echo: false\n#| warning: false\n\n#filter out only chancellors\ndf_chancellors_speeches <- df_chancellors %>% \n  filter(scope==\"included\") %>% \n  mutate(chancellor_name_family=str_extract(name_clean, regex(\"\\\\w+$\"))) %>% \n  ungroup() %>% \n  left_join(., df_all,\n            by=c(\"chancellor_name_family\"=\"speaker_name_family\")) %>% \n  #only those observations where speech date is within office period; \n  #removes duplicates created by left_join; e.g. Kurz, Schüssel, Feaymann have two terms;\n  filter(date >= office_start) %>% \n  filter(date <= office_end) %>% \n  select(-scope, -contains(\"position\"), -name_family) %>% \n  mutate(office_duration=difftime(office_end, office_start, units=c(\"days\")) %>% \n           as.numeric()) %>%\n  distinct()\n```\n\nAdd details on party affiliation:\n\n```{r, code_folding=NULL, echo=T}\nvec_color <- c(\"SPÖ\"=\"red\", \"ÖVP\"=\"black\", \"Neue ÖVP\"=\"#62C3D0\", \"unabhängig\"=\"grey30\")  \n\ndf_party<- tibble::tribble(\n          ~name, ~party,\n          \"Vranitzky\", \"SPÖ\",\n        \"Klima\",  \"SPÖ\",\n         \"Kurz\", \"Neue ÖVP\",\n     \"Schüssel\",  \"ÖVP\",\n     \"Bierlein\", \"unabhängig\",\n  \"Gusenbauer\",  \"SPÖ\",\n      \"Faymann\",  \"SPÖ\",\n         \"Kern\",  \"SPÖ\"\n  ) \n\ndf_chancellors_speeches <- df_chancellors_speeches %>% \n  left_join(.,\n            df_party,\n            by=c(\"chancellor_name_family\"=\"name\"))\n\n```\n\n# Results\n\n## Some exploratory snapshots:\n\n### Number of days with at least one statement by a chancellor\n\n```{r}\nlibrary(paletteer)\ndf_statement_days <- df_chancellors_speeches %>% \n  group_by(gov, office_duration) %>% \n  summarise(n_days=length(unique(date))) %>% \n  arrange(desc(n_days)) %>% \n  ungroup() %>% \n  mutate(n_days_rel=office_duration/n_days) %>% \n  arrange(n_days_rel)\n\ndf_statement_days %>%\n  mutate(chancellor_name=str_extract(gov, regex(\"^\\\\w+\"))) %>% \n  ggplot()+\n  labs(title=\"An wievielen Tagen sprach Kanzler/in im Parlament\",\n       # subtitle=\"An wievielen Tagen gab der Kanzler/die Kanzlerin ein Statement im Parlament?\",\n       caption=glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}. Keine vollständigen Daten für Zeit vor Vranitzky 5.\\nAnalyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"),\n       # x=\"Gesamtlänge aller Statements in Anzahl an Wörtern\")+\n       x=\"Tage im Amt\",\n       y=\"Tage mit Statements\")+\n  geom_point(aes(\n    x=office_duration,\n    colour=chancellor_name,\n    y=n_days\n  ))+\n  geom_text_repel(aes(\n    x=office_duration,\n    y=n_days,\n    label=gov,\n    group=chancellor_name,\n    colour=chancellor_name))+\n  scale_y_continuous(label=scales::label_comma())+\n  scale_x_continuous(label=scales::label_comma())+\n  scale_color_paletteer_d(\"ggsci::dark_uchicago\")+\n  theme_post()+\n  theme(\n    legend.position = \"none\",\n    plot.caption.position = \"plot\",\n    axis.title.y = element_text(angle=90,\n                                vjust=1,\n                                hjust=.9))\n\n\n```\n\n### Total number of words spoken by a chancellor\n\n```{r}\ndf_statement_length <- df_chancellors_speeches %>% \n  group_by(gov, office_duration) %>% \n  summarise(text_length_total=sum(text_length, na.rm=T)) %>% \n  ungroup() %>% \n  mutate(text_length_day=text_length_total/office_duration)\n```\n\n```{r}\ndf_statement_length %>%\n  mutate(chancellor_name=str_extract(gov, regex(\"^\\\\w+\"))) %>% \n  ggplot()+\n  labs(title=\"Wie lange haben Kanzler/in vor dem Parlament gesprochen?\",\n       subtitle=\"Anzahl der insg. gesprochenen Worte im Parlament. Daten ab Vranitzky 5 (März 1996).\",\n       caption=glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}.\\nAnalyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"),\n       # x=\"Gesamtlänge aller Statements in Anzahl an Wörtern\")+\n       x=\"Tage im Amt\",\n       y=\"Anzahl aller gesprochenen Worte\")+\n  geom_point(aes(\n    x=office_duration,\n    y=text_length_total\n  ))+\n  geom_text_repel(aes(\n    x=office_duration,\n    y=text_length_total,\n    label=gov,\n    group=chancellor_name,\n    colour=chancellor_name))+\n  scale_color_paletteer_d(\"ggsci::dark_uchicago\")+\n  scale_y_continuous(label=scales::label_comma())+\n  scale_x_continuous(label=scales::label_comma())+\n  # paletteer::scale_color_paletteer_d(palette = \"dutchmasters::anatomy\")+\n  theme_post()+\n  theme(\n    legend.position = \"none\",\n    plot.caption.position = \"plot\",\n    axis.title.y = element_text(angle=90,\n                                vjust=1,\n                                hjust=1)\n  )\n```\n\n```{r}\ndf_statement_length %>% \n  arrange(desc(text_length_day)) %>% \n  reactable(.,\n            columns=list(\n              office_duration=colDef(\n                name=\"Tage im Amt\"\n              ),\n              text_length_total=colDef(\n                name=\"Summe an insgesamt gesprochener Worte\",\n                format=colFormat(separators = T)\n              ),\n              text_length_day=colDef(\n                name=\"Worte pro Tag\",\n                format=colFormat(digits = 2),\n                style=color_scales(., \n                                   colors=c(\"grey\", \"blue\"))\n              )),\n            defaultPageSize =11,\n            theme=nytimes()) %>% \n  add_title(\"Anzahl der gesprochenen Worte im Parlament pro Tag im Amt\",\n            font_size=18) %>% \n  add_subtitle(\"Daten ab Vranitzky 5 (März 1996).\",\n               font_size=12,\n               font_weight=\"normal\") %>% \n  add_source(glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}. Daten zu Vranitzky beziehen sich nur auf seine 5. Amtsperiode (1996-03-12 bis 1997-01-18).\n                        Analyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"),\n             font_size=11,\n             font_weight = \"normal\",\n             font_color = \"#999999\",\n             # font_family = \"Helvetica\",\n             align=\"left\")\n```\n\nA few things stood out for me here: First, Chancellor Schüssel, who is occasionally remembered as the \"Chancellor of Silence\" (\"Schweigekanzler\") was actually quite talkative. In absolute numbers, no other chancellor in the dataset spoke more than Schüssel during his second term. And also his relative numbers are among the top figures. Admittedly, his nickname did not refer to the length of his statements, but rather - if I remember correctly - the (alleged) absence of statements when it came to controversial issues, i.e. statements by his extreme-right coalition partner.\n\nSecond, and more related to my point of departure, chancellor Kurz features very low numbers. With the exception of the special case of chancellor Bierlein (caretaker/expert government) no other chancellor had fewer words spoken in parliament, if take the duration of his office into account.\n\n## Use of term \"I\"\n\nNow let's focus on the chancellors' usage of the word 'I' (*'ich'*). Below the code and comments.\n\n```{r}\n#| echo: false\n#| warning: false\n\n\nsearch_term=\"\\\\bich\\\\b\"\n\ndf_chancellors_speeches <- df_chancellors_speeches %>% \n  mutate(search_term_n=str_count(text, regex(search_term, ignore_case = T))) \n\n#search term in total per chancellor\ndf_search_term_n<- df_chancellors_speeches %>% \n  group_by(chancellor_name_family, party) %>% \n  summarise(search_term_sum=sum(search_term_n),\n            text_length_total=sum(text_length)) %>% \n  ungroup() %>% \n  mutate(search_term_rel=search_term_sum/text_length_total) %>% \n  mutate(search_term_rel_inv=1/search_term_rel)  %>% \n  arrange(desc(search_term_rel))\n\n```\n\nFor the sake of clarity, but mainly due to an inability to make up my mind, two plots which depict the same data. Again, with the exception of the special case of Bierlein, no other chancellor used the word 'I' more often than Kurz (however, the difference to Klima seems not considerable).\n\n### Plot version 1\n\n```{r}\n#| echo: false\n#| warning: false\n\npl_df_search_term_total <- df_search_term_n %>% \n  mutate(chancellor_name=fct_reorder(chancellor_name_family, search_term_rel_inv)) \n\nhrbrthemes::update_geom_font_defaults(family=\"Roboto Condensed\")\n\nlibrary(ggtext)\n\npl_search_term_total <- pl_df_search_term_total %>% \n  ggplot()+\n labs(title=\"Bundeskanzler/in und das Wort <span style='font-family:Caveat;color:black;font-size:30pt;'>'Ich'</span>\",\n     #  x=c(\"<< häufiger\",  \"seltener >>\"),\n       subtitle=\"Wie oft verwendete der Kanzler/die Kanzlerin durchschnittlich das Wort 'ich' in Statements vor dem Parlament?\",\n       caption=glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}. Daten zu Vranitzky beziehen sich nur auf seine 5. Amtsperiode (1996-03-12 bis 1997-01-18).\\nAnalyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"))+\n  geom_segment(x=51, xend=109,\n               y=0, yend=0,\n               color=\"black\",\n               linewidth=0.5,\n               linejoin = \"mitre\",\n               arrow=arrow(length=unit(0.3, \"cm\"),\n                           ends=\"both\"))+\n  geom_label(x=53, #52\n            y=0,  #0\n            label=\"häufiger\",\n            size=3,\n            color=\"black\",\n            fill=\"white\",\n            fontface=\"plain\",\n            label.size=0,\n            hjust=0,\n            check_overlap = T)+\n    geom_label(x=107,\n            y=0,\n            label=\"seltener\",\n            label.size=0,\n            size=3,\n            family=\"Roboto Condensed\",\n            fontface=\"plain\",\n            color=\"black\",\n            fill=\"white\",\n            hjust=1,\n            check_overlap = T\n            )+\n  ggrepel::geom_text_repel(\n    data=. %>% \n      arrange(search_term_rel_inv) %>% \n      filter(row_number()%%2==1),\n    aes(\n    y=0,\n    x=search_term_rel_inv,\n    color=party,\n    label=paste0(str_extract(chancellor_name, regex(\"\\\\w+$\")), \" (\",\n                round(search_term_rel_inv, digits = 1),\")\")),\n    # nudge_y = 0.5,\n    hjust=0,\n    size=3,\n    nudge_y = -.1,\n    family=\"Roboto Condensed\",\n    angle=0,\n    segment.color=\"grey70\",\n    show.legend = F)+\n  ggrepel::geom_text_repel(\n    data=. %>% \n      arrange(search_term_rel_inv) %>% \n      filter(row_number()%%2==0),\n    aes(\n    y=0,\n    x=search_term_rel_inv,\n    color=party,\n    label=paste0(str_extract(chancellor_name, regex(\"\\\\w+$\")), \" (\",\n                round(search_term_rel_inv, digits = 0),\")\")),\n    force_pull = 0,\n    nudge_y = .1,\n    family=\"Roboto Condensed\",\n    hjust=0,\n    size=3,\n    angle=0,\n    segment.color=\"grey70\",\n    show.legend = F\n    )+\n  geom_point(aes(\n    y=0,\n    x=search_term_rel_inv,\n    color=party,\n    fill=party),\n    stat=\"identity\")+\n  scale_color_manual(values=vec_color)+\n  # scale_fill_viridis_d(option=\"D\")+\n  scale_x_continuous(limits=c(50, 110),\n                     breaks=seq(60, 100, 20),\n                     expand=expansion(mult=c(0.00,0.01)),\n                     labels=function(x) glue::glue(\"jedes {x}. Wort\"),\n                     position = \"top\")+\n  scale_y_continuous(limits=c(-.4,.4),\n                     expand=expansion(mult=0))+\n  # hrbrthemes::theme_ipsum_rc()+\n  theme_post()+\n  coord_cartesian(ylim=c(-.2,.2))+\n  guides(color=guide_legend(title=NULL,\n                            label.theme = element_text(size=8,\n                                                       margin=ggplot2::margin(l=0, unit=\"cm\"),\n                                                       family=\"Roboto Condensed\",\n                                                       color=\"grey50\")),\n         fill=guide_none())+\n  theme(legend.position=\"top\",\n        legend.direction = \"horizontal\",\n        legend.text.align = 0,\n        legend.justification = \"left\",\n        legend.margin = ggplot2::margin(l=0, t=0, unit=\"cm\"),\n        legend.box.margin = ggplot2::margin(l=-0.3, t=0.25, unit = \"cm\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_line(),\n        # panel.grid.minor.x = element_blank(),\n        plot.title = element_markdown(),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(size=rel(2),\n                                     family=\"Roboto Condensed\",\n                                     margin=ggplot2::margin(b=0, unit=\"cm\")),\n        plot.caption = element_text(face=\"plain\",\n                                    family=\"Roboto Condensed\",\n                                    hjust=0),\n        axis.ticks.length.x.bottom = unit(.3, units=\"cm\"),\n        axis.text.x=element_text(size=8,\n                                 margin=ggplot2::margin(t=0, b=0, unit=\"cm\")),\n        axis.title.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank())\n\n```\n\n```{r}\n#| echo: false\n#| fig-height: 3\n#| column: body-outset-right\n\n\npl_search_term_total\n```\n\n```{r, dev='ragg_png', eval=F, include=F}\nggsave(filename=here::here(\"_post\", \n                           \"2021-04-22-how-often-do-austrias-chancellors-use-the-word-i\", \n                           \"how-often-do-austrias-chancellors-use-the-word-i_files\",\n                           \"images\", \n                           \"pl_search_term_total.png\"),\n       plot=pl_search_term_total,\n       width = 16,\n       height = 8,\n       units=\"cm\")\n```\n\n### Plot version 2\n\n```{r}\n#| echo: false\n#| warning: false\n#| message: false\n\nlibrary(ggtext)\n#vec_color %>% enframe(., name=\"party\", value=\"party_color\")\n\ndf_pl_search_term_total_2<- pl_df_search_term_total %>% \n  left_join(., vec_color %>% enframe(., name=\"party\", value=\"party_color\")) %>% \n  mutate(chancellor_name_md=glue::glue(\"<span style='color:{party_color}'>{chancellor_name}</span>\")) %>%\n  mutate(chancellor_name_md=fct_reorder(chancellor_name_md, search_term_rel_inv) %>% \n           fct_rev()) \n  # select(chancellor_name_md)\n  \n```\n\n```{r}\n#| include: false\n\npl_search_term_total_2  <- df_pl_search_term_total_2%>%  \n  ggplot()+\n  labs(title=\"Bundeskanzler/in und das Wort <span style='font-family:Caveat;color:black;font-size:30pt;'>'Ich'</span>\",\n     #  x=c(\"<< häufiger\",  \"seltener >>\"),\n       subtitle=\"Wie oft verwendete der Kanzler/die Kanzlerin durchschnittlich das Wort 'ich' in Statements vor dem Parlament?\",\n       caption=glue::glue(\"Daten: ParlSpeech V2 (Rauh und Schwalbach 2020) für {date_cut_off_min} bis {date_cut_off_max}; eigene Erhebung aus Protokollen des Parlaments \\nfür {date_cut_off_max} bis {max(df_all$date)}. Daten zu Vranitzky beziehen sich nur auf seine 5. Amtsperiode (1996-03-12 bis 1997-01-18).\\nAnalyse/Graphik: Roland Schmidt | @zoowalk | http://werk.statt.codes\"))+\n  geom_segment(aes(\n    y=chancellor_name_md,\n    yend=chancellor_name_md,\n    x=0,\n    xend=search_term_rel_inv,\n    group=chancellor_name_md,\n    color=party\n    ),\n        linewidth=3,\n        # color=\"grey80\"\n  )+\n  geom_text(data=. %>% filter(!str_detect(chancellor_name, \"Kurz\")),\n              aes(\n    y=chancellor_name_md,\n    x=search_term_rel_inv,\n    #color=search_term_rel_inv,\n    label=round(search_term_rel_inv, 0)),\n    nudge_x = 1,\n    size=3.5,\n    hjust=0,\n    face=\"bold\"\n    )+\n  geom_text(data=. %>% filter(str_detect(chancellor_name, \"Kurz\")),\n              aes(\n    y=chancellor_name_md,\n    x=search_term_rel_inv,\n    label=glue::glue(\"im Durchschnitt jedes {round(search_term_rel_inv, 0)}. Wort\")),\n    nudge_x = 1,\n    size=3.5,\n    hjust=0,\n    face=\"bold\"\n    )+\n  #scale_y_discrete(label=function(x) stringr::str_extract(x, regex(\"\\\\S+$\")))+\n  scale_x_continuous(expand=expansion(mult=c(0, 0.05)),\n                     breaks = seq(0, 100, 25),\n                     labels=c(\"                                   häufiger <<\", seq(25,75,25) %>% paste0(., \".\"),\">> seltener                                   \"),\n                     position = \"top\",\n                     sec.axis = dup_axis()\n                     )+\n  scale_color_manual(values=vec_color)+\n  hrbrthemes::theme_ipsum_rc()+\n  theme(panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        plot.title = element_markdown(margin=ggplot2::margin(b=0),\n                                      size=13),\n        plot.title.position = \"plot\",\n        plot.subtitle = element_text(size=rel(.9),\n                                     margin = ggplot2::margin(\n                                       t=0,\n                                       b=0.3, unit=\"cm\"),\n                                     color=\"grey10\"),\n        plot.caption = element_text(color=\"grey30\",\n                                    margin=ggplot2::margin(t=0, unit=\"cm\"),\n                                    size=8,\n                                    hjust=0),\n        plot.caption.position = \"plot\",\n        axis.text.x.top = element_text(size=9,\n                                       color=\"grey30\",\n                                       margin=ggplot2::margin(b=0,\n                                                       t=0, \n                                                       unit=\"cm\")),\n        axis.text.x.bottom = element_blank(),\n        axis.title.x.top = element_blank(),\n        axis.title.x.bottom = element_blank(),\n        axis.title.y=element_blank(),\n        axis.text.y = element_markdown(size=10, face=\"bold\"),\n        legend.position=\"top\",\n        legend.margin = ggplot2::margin(0, unit=\"cm\"),\n        legend.title=element_blank(),\n        legend.justification=c(-.25, 0))+\n       guides(color=guide_legend(keywidth = 0.4))\n```\n\n```{r}\n#| fig-height: 4\n#| column: body-outset-right\n#| echo: false\n#| fig-align: left\n\npl_search_term_total_2\n```\n\n```{r}\n#| include: false\n#| eval: true\nggsave(filename=here::here(\"posts\", \n                           \"2021-04-22-how-often-do-austrias-chancellors-use-the-word-i\",\n                           \"preview_thumbnail_2.svg\"),\n      plot=pl_search_term_total_2,\n      # width = 150,\n      # height = 200,\n       units=c(\"px\"))\n```\n\n# Wrap-up\n\nSo that's it. If the above results are not profoundly meaningful (or maybe they are?), I found them at least somewhat entertaining. As always, if you spot any error, have a question etc. feel free to contact me, best via [twitter](https://twitter.com/zoowalk){target=\"_blank\"} direct message.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"left","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["lightbox"],"css":["../../styles.css"],"highlight-style":"github","toc":true,"toc-depth":3,"number-sections":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.321","author":[{"name":"Roland Schmidt","url":"https://werk.statt.codes"}],"editor":"visual","date-format":"D MMM YYYY","lightbox":"auto","theme":{"light":"litera"},"code-copy":true,"fontsize":"16px","toc-title":"Contents","toc-location":"left","fig-cap-location":"top","smooth-scroll":true,"title-block-banner":true,"license":"CC BY-NC","citation":true,"title":"How often do Austria's Chancellors use the word 'I'","description":"In a previous post, I detailed how to extract statements given in Austria’s parliament from the sessions’ transcripts. In this post, I use the extracted text - in combination with an already existing database on earlier sessions - to compare chancellors’ engagement with parliament and …their use of the word 'I'.","date":"11-21-2021","categories":["Austria","regex"],"image":"preview - Copy_x.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}