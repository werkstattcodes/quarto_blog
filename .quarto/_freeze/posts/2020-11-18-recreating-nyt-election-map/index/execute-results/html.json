{
  "hash": "7c1ab128605d3a5e62449763d19750db",
  "result": {
    "markdown": "---\ntitle: \"Recreating NYT election map\"\ndescription: \"How to re-create election maps by the NYT with ggplot.\"\ndate: 11-18-2020\n\ndraft: true\n\ncategories:\n  - Austria\n  - COVID\n  - OCR\n  - stringr\n  - web scraping\n\nimage: preview.png\n\n\n---\n\n\n\n\n# CONTEXT\n\nWhile following the NYT's coverage of the US presidential elections, I became once again intrigued by their data visualizations. One type of visualization which I found particularly remarkable was the map with arrows indicting how far a state's counties shifted to democrats or republicans. See [here](https://www.nytimes.com/interactive/2020/11/07/us/elections/pennsylvania-counties-battleground-state.html){target=\"_blank\"} on the NYT's website.\n\n![](Capture.PNG)\n\nThis prompted me to give it a try with `ggplot` and see how far I could replicate the map. Below the relevant steps. Thanks also to the respondents of my pertaining [tweet](https://twitter.com/zoowalk/status/1325486039687782400){target=\"_blank\"}.\n\nI hope the code speaks largely for itself. Hence, only a few additional comments.\n\n# SETUP\n\n<details closed>\n\n<summary>Load packages</summary>\n\nLoad the relevant packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jsonlite)\nlibrary(ggtext)\nlibrary(extrafont)\nloadfonts(device = \"win\", quiet = T)\nlibrary(sf)\nlibrary(patchwork)\nlibrary(knitr)\nlibrary(svglite)\nlibrary(tidyverse)\nlibrary(tidygeocoder)\n\nplot_bg_color <- \"white\"\n```\n:::\n\n\n</details>\n\n<summary>Code: Define rmarkdown options</summary>\n\n\n::: {.cell}\n\n:::\n\n\n</details>\n\n# CREATE MAP\n\n## Get electoral results\n\n<details open>\n\n<summary>Code: Get election results </summary>\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nresults <- \"https://politics-elex-results.data.api.cnn.io/results/view/2020-county-races-PG-PA.json\"\ndf_results <- jsonlite::fromJSON(results)\n# listviewer::jsonedit(df_results)\n\ndf_2020 <- df_results %>%\nunnest_longer(candidates) %>%\nunnest_wider(candidates)  %>%\nselect(\n  candidate=lastName,\n  party=majorParty,\n  county=countyName,\n  vote_share=votePercentNum,\n  vote_absolute=voteNum\n) %>%\nmutate(year=2020) %>%\nmutate(party=case_when(\n  party==\"REP\" ~ \"republican\",\n  party==\"DEM\" ~ \"democrat\"\n))\n```\n:::\n\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# 2016 results ------------------------------------------------------------\n# source: https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/VOQCHQ#\ndf_2016 <- readxl::read_xlsx(here::here(\"posts\", \"2020-11-18-recreating-nyt-election-map\",\"results2016.xlsx\")) %>% \n  select(year, state, county, candidate, party, contains(\"votes\")) %>% \n  filter(year==2016 & state==\"Pennsylvania\") %>% \n  group_by(county) %>% \n  mutate(vote_share=candidatevotes/totalvotes*100) %>% \n  select(year, county, party, candidate, vote_absolute=candidatevotes, vote_share) %>% \n  ungroup()\n\n# combine -----------------------------------------------------------------\n\ndf_combined <- bind_rows(df_2016, df_2020) %>% \n  filter(party %in% c(\"democrat\", \"republican\")) %>% \n  ungroup()\n\n# Since there are also other candidates than Trump and Biden (yes, really), its not ok to simply use the difference between their 2020 and 2016 results. There are counties in which both candidates increased their vote share. Hence, whether a county became more democrat or republican has to be calculated on the basis of their joint votes (share).\n\n#change\ndf_all <- df_combined %>% \n  group_by(county, party) %>% \n  arrange(desc(year), .by_group=T) %>% \n  mutate(change=vote_share-lead(vote_share)) %>% \n  group_by(year, county) %>% \n  mutate(vote_share_combined=sum(vote_share)) %>% \n  ungroup() %>% \n  mutate(vote_share_party=vote_share/vote_share_combined*100) %>% \n  group_by(county, party) %>% \n  arrange(desc(year), .by_group = T) %>% \n  mutate(nchange_parties=vote_share_party-lead(vote_share_party),\n         change_vote_absolute=vote_absolute-lead(vote_absolute)) %>% \n  ungroup()\n```\n:::\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\ndf_change <- df_combined %>% \n  pivot_longer(cols=contains(\"vote\"),\n               names_to = \"indicator\") %>% \n  group_by(county, party, indicator) %>% \n  arrange(desc(year), .by_group = T) %>% \n  mutate(change=value-lead(value) %>% \n           round(., digits = 2)) %>% \n  ungroup()\n\n\ndf_change <- df_change %>% \n  filter(year==\"2020\") %>% \n  group_by(county, indicator) %>% \n  arrange(desc(party), .by_group = T) %>% \n  summarise(party_diff=change-lead(change)) %>% \n  filter(!is.na(party_diff)) %>% \n  pivot_wider(id_cols = \"county\",\n              values_from = \"party_diff\",\n              names_from=\"indicator\",\n              names_glue=\"diff_change_{indicator}\") %>% \n  mutate(party=case_when(diff_change_vote_share < 0 ~ \"democrat\",\n                         diff_change_vote_share > 0 ~ \"republican\"))\n```\n:::\n\n\n</details>\n\n## Create map\n\n<details open>\n\n<summary>Code: Create maps</summary>\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n#import shapefile\nlibrary(sf)\n#https://data-pennshare.opendata.arcgis.com/datasets/pennsylvania-county-boundaries\npa <- st_read(here::here(\"posts\", \"2020-11-18-recreating-nyt-election-map\",\"shapefile\",\n                         \"county_boundary.shp\"),\n              quiet=T) %>% \n  st_transform(32617)\n\n\n#extract x and y positions from the geometry column\nsf_cent <- st_centroid(pa) %>% \n  mutate(point_x=map_dbl(geometry, pluck, 1),\n         point_y=map_dbl(geometry, pluck, 2))\n```\n:::\n\n\n</details>\n\nCalculate center of each county for the starting position of the arrows (=centroids for each polygon) as well as the length of the arrows. The arrows of in the NYT's plot have an angle of 20 degrees (e.g. the measurement tool in Gimp allows you to get the angle). With this angle and the desired length (=difference of % changes of republicans and democrats) we can calculate the horizontal and vertical distance of the arrows' end from their starting position. The cos and sin functions are our friends here (remember from high school..., if not see [here](https://en.wikipedia.org/wiki/Trigonometric_functions){target=\"_blank\"}).\n\n<details open>\n\n<summary>Code: Calculate centroids</summary>\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# data --------------------------------------------------------------------\n\nscale_factor <- 10^3.65\n\nsf_cent2 <- sf_cent %>% \n  # left_join(., df_change %>% select(county, party, change_parties, change_vote_absolute) %>% \n  left_join(., df_change %>% \n              # select(county, party, change_parties) %>% \n              mutate(county=stringr::str_to_upper(county)),\n            by=c(\"COUNTY_NAM\"=\"county\")) %>% \n  mutate(x_change=diff_change_vote_share*sin(20),\n         y_change=abs(diff_change_vote_share)*cos(20)) %>% \n  mutate(point_x_end=point_x+(x_change*scale_factor),\n         point_y_end=(y_change*scale_factor)+point_y)\n```\n:::\n\n\n</details>\n\nUse the ~~`googleway`~~ `opencage` package to get the long/lat details for Philly and Pittsburgh.[^1]\n\n[^1]: In a previous version I used the googleway package. The opencage package allows to get geolocation without needing to access the google API.\n\n<details open>\n\n<summary>Code: Geocode cities</summary>\n\n\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nlibrary(tidygeocoder)\n\ncities <- c(\"Philadelphia\", \"Pittsburgh\")\ndf_cities <- map(cities, \\(x) tidygeocoder::geo(city=x,\n))  %>%\npurrr::list_rbind()\n\nsf_cities <- st_as_sf(df_cities, coords = c(\"long\", \"lat\"), remove = FALSE, \n         crs = 4326, agr = \"constant\") %>% \n  st_transform(32617)\n```\n:::\n\n\n</details>\n\n### Main map\n\nCreate the main plot with the map.\n\n<details open>\n\n<summary>Code: map</summary>\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# plot --------------------------------------------------------------------\n\npl_map <- ggplot()+\n  labs(\n    # title = 'The Vote in Battleground States<br>\n    #    <span style=\"color:#606060;font-size:35pt;font-family:Times;\">Pennsylvania</span>',\n    caption=\"graph remake: Roland Schmidt|@zoowalk|https://werk.statt.codes\\noriginal: https://nyti.ms/3lftRDe\"\n  )+\n  geom_sf(data=pa, \n          size=.1,\n          fill=\"white\")+\n  geom_sf(data = sf_cities, \n          size=1.5,\n          color = 'grey50') +\n  geom_sf_text(data = sf_cities,\n                aes(label=city %>% \n                      str_extract(., regex(\"[:alpha:]*\"))),\n               nudge_y = -10^4.2,\n               size=3.2,\n               family=\"Arial\",\n               color=\"grey50\")+\n  geom_segment(data=sf_cent2,\n               aes(x=point_x,\n                   xend=point_x_end,\n                   y=point_y,\n                   yend=point_y_end,\n                   size=abs(diff_change_vote_absolute),\n                   color=party),\n               linejoin=\"mitre\",\n               arrow=arrow(length=unit(0.2, \"cm\"),\n                           angle=15,\n                           type=\"closed\"))+\n  scale_x_continuous(expand=expansion(mult=c(.1,.3)))+\n  scale_size_continuous(range=c(0,3))+\n  scale_color_manual(values=c(democrat=\"#3f95b0\", republican=\"#ba6b67\"))+\n  theme_void()+\n  theme(plot.background = element_rect(fill=plot_bg_color),\n   plot.title = element_markdown(hjust = .5,\n                                 lineheight = 3,\n                                 color=\"#606060\"\n                                 ),\n   plot.margin = margin(0,0,0,0, unit=\"cm\"),\n   plot.caption = element_text(hjust=0, \n                               family = \"Arial\",\n                               lineheight = 1,\n                               color=\"grey60\"),\n        legend.position = \"none\")\n```\n:::\n\n\n</details>\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){fig-align='left' width=100%}\n:::\n:::\n\n\n### Legend\n\nCreate a second plot which shows the legend in the graph.\n\n<details open>\n\n<summary>Code: legend inset</summary>\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# inset -------------------------------------------------------------------\n\ndf_inset <- data.frame(\n  stringsAsFactors = FALSE,\n             party = c(\"republican\", \"democrat\"),\n            x = c(.5L, -.5L),\n              xend = c(3L, -3L),\n            y = c(0L, 0L),\n              yend = c(.5L, .5L)\n)\n\npl_inset <-  df_inset %>% \nggplot()+\n  labs(title=\"Shift from 2016\",\n       subtitle=\"In counties that have reported\\n almost all of their votes\")+\n  geom_segment(aes(x=x,\n                   xend=xend,\n                   y=y,\n                   yend=yend,\n                   color=party),\n               size=1,\n               linejoin=\"mitre\",\n               arrow=arrow(length=unit(0.1, \"cm\"),\n                           angle=20,\n                           type=\"closed\")\n               )+\n  geom_text(x=.5, y=-.3, \n            label=\"More\\nRepublican\", \n            hjust=0, \n            lineheight=0.8,\n            size=3,\n            color=\"grey60\", \n            family=\"Arial\")+\n  geom_text(x=-.5, y=-.3, label=\"More\\nDemocratic\", \n            lineheight=0.8,\n            hjust=1, \n            size=3,\n            color=\"grey60\", \n            family=\"Arial\")+\n  scale_color_manual(values=c(democrat=\"#3f95b0\", republican=\"#ba6b67\"))+\n  scale_x_continuous(expand=expansion(ad=c(1,1)), limits=c(-7,7))+\n  scale_y_continuous(limits=c(-1,.5), expand=expansion(add=c(0.5, 0.2)))+\n  theme_void()+\n  theme(legend.position=\"none\",\n        plot.title = element_text(hjust = 0.5,\n                                  family = \"Arial\",\n                                  face=\"bold\",\n                                  color=\"#606060\",\n                                  margin = margin(b=0, unit=\"cm\"),\n                                  size=13),\n        plot.subtitle = element_text(hjust=0.5,\n                                     margin = margin(t=0.1, unit=\"cm\"),\n                                     size=10,\n                                     color=\"grey60\",\n                                     family = \"Arial\"))\n```\n:::\n\n\n</details>\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='left' width=100%}\n:::\n:::\n\n\n### Result\n\nInsert the 'legend plot' as an inset by using the latest release of the `patchwork` package (see details [here](https://www.data-imaginist.com/2020/insetting-a-new-patchwork-version/){target=\"_blank\"}).\n\n<details open>\n\n<summary>Code: Combine plots</summary>\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# combine plots -----------------------------------------------------------\n\npl_combined <- pl_map+inset_element(pl_inset, top=0.9, bottom=0.6, left=0.75, right=1, align_to=\"full\")\n```\n:::\n\n\n</details>\n\nHere's the result.\n\n\n::: {.cell layout-align=\"left\" fig.asp='0.6' crop='true'}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='left' width=100% height=110%}\n:::\n:::\n\n\nAnd here the original for comparison:\n\n![](Capture.PNG)\n\n# PENDING DETAILS\n\nFor my liking, the plot comes pretty close to the one of the NYT, but a few details are still off. *Width of arrows*: I assumed that the width would be weighted by the absolute number of votes, but apparently that's not what the NYT used. Without any further details available (which I think should be actually mentioned on their site), I can only guess here. *Length of arrows*: There are also a few counties in which the length doesn't really mirror the arrows in the NYT's plot. I am not entirely clear why this is. I strongl assume that's due to differences in the underlying election results, meaning different points in time.\n\nOn a purely aesthetic front, I couldn't find a way how to *remove the white frame around the plot*, despite trying out a few suggested solutions; see [here](https://community.rstudio.com/t/ggsave-aspect-ratio-whitespace-use-case-favicon-for-blogdown/6793/7){target=\"_blank\"}, [here](https://www.pmassicotte.com/post/removing-borders-around-ggplot2-graphs/){target=\"_blank\"}, and [here](https://stackoverflow.com/questions/58723151/remove-white-margin-surrounding-geom-sf-objects-in-r-shiny-ggplot-with-renderp){target=\"_blank\"}. The [`crop` chunk option](https://bookdown.org/yihui/rmarkdown-cookbook/crop-plot.html){target=\"_blank\"} can do the trick, but in this case, with the output an svg, the final result looked quite blurred.\n\nOverall tough, while the graph is not 100 % identical with the NYT's versions, its sufficiently close for my purpose and available time. And more importantly to me, the basic concept how to create such graphs is now clear to me.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}